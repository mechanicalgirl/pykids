[{"fields": {"step_number": 4, "image": "", "step_name": "Teachers", "description": "<h3>Teachers</h3>\r\n\r\n<p><i>find one other person to help, but if you are not going to teach this material yourself (but we believe you can!) make sure you have two teachers - two teachers allow you to take frequent breaks (alternate segments) - look to local user groups</i></p>\r\n\r\n<h3>Enlist volunteer teaching assistants</h3>\r\n\r\n<p>Volunteers are crucial - each student has unique needs and levels of understanding, so with both age groups, we relied heavily on one-on-one help to get the students through some of the tougher concepts.  A 1:3 ratio of students to volunteers would not be overdoing it.</p>\r\n\r\n<p>The one thing that we asked was that volunteers wait until break times to make remarks about the content. We felt that it was important to avoid derailing the class with interruptions, and that any errors or missed content could be taken care of later. We wanted to keep the focus on the students, rather than on the slides.</p>\r\n"}, "model": "teaching.step", "pk": 8}, {"fields": {"step_number": 9, "image": "", "step_name": "Sponsors", "description": "<br>\r\ndecide how much money you need (see the budget page)<br>\r\n<br>\r\nsponsors can provide other things than money, like meals and classroom location<br>\r\n<br>\r\nreach out to local companies<br>\r\n<br>\r\nrequest a grant from the PSF<br>\r\n<br>\r\nmay need to provide them with forms (W-9?)<br>\r\n<br>\r\nsetting up a PayPal account provides an easy way for sponsors to send money, but be aware that there will be service fees subtracted<br>"}, "model": "teaching.step", "pk": 9}, {"fields": {"step_number": 8, "image": "", "step_name": "Money", "description": "<br>\r\nunfortunately the first thing you'll have to think about<br>\r\n<br>\r\nmake a budget, decide how much you'll need<br>\r\n<br>\r\nwhat you'll need money for (some of these things might be donated):\r\n<ul>\r\n<li>classroom space\r\n<li>computer equipment - this cost will depend on what setup you decide to use \r\n<li>books are optional\r\n<li>meals and snacks are not optional (maybe breakfast, definitely lunch, morning and afternoon snacks, water and other drinks)\r\n</ul>\r\ncheck your state's laws and consult with your bank - you may be able to open a bank account to handle the money for your event - in TX I had to file DBA paperwork, but then I was able to open an account, and since all the money I received was spent on the event (or donated), I didn't have to file any tax paperwork at the end of the year, but YMMV<br>\r\n<br>\r\nmake a budget and stick to it<br>\r\n<br>\r\nkeep copies of ALL invoices and paperwork<br>\r\n"}, "model": "teaching.step", "pk": 10}, {"fields": {"step_number": 3, "image": "", "step_name": "Students", "description": "<h3>Where to find students</h3>\r\n\r\n<p>If you've decided to teach a beginner programming class, you are in a unique position to change a life. You can open doors that might otherwise remain closed for some students, by extending an invitation to young students who might not be exposed to computers and programming in their schools or at home.</p>\r\n\r\n<p>You can reach out to local chapters of <a href=\"http://www.bgca.org/\" target=\"new\">Boys & Girls Clubs</a> and <a href=\"http://www.bbbs.org/\" target=\"new\">Big Brothers Big Sisters</a>. Local STEM education groups can also be great resources, as can local programming meetups.</p>\r\n\r\n<h3>Age and class size constraints</h3>\r\n\r\n<p>Your class should probably be limited to about 25-30 students. Any more than that and the noise and activity level in the classroom can be distracting, especially when there are volunteers/teaching assistants working alongside the kids.</p>\r\n\r\n<p>The recommended age for this class is 12 years and older, but use your discretion. Students as young as 10 could be eligible, but you might want to steer them towards graphical interface learning tools such as Scratch and Hopscotch instead.</p>\r\n\r\n<p>Remember that students need to have reached a certain point in their cognitive development to be able to work with some of the abstract concepts common to modern computing.</p>\r\n\r\n<p>Basic typing skills are also going to matter - even a bright younger child might not be able to type quickly enough to keep up, and that can impair the learning experience.</p>\r\n\r\n<p>Both of those things need to be in place for this material to be useful and comprehensible to students.</p>\r\n\r\n<h3>Enrollment</h3>\r\n\r\n<p>Once you've settled on a date and venue and have planning well underway, use a free service like <a href=\"www.eventbrite.com\" target=\"new\">EventBrite</a> to take student applications.</p>\r\n\r\n<p>You'll need some basic information from your students and their parents/guardians:</p>\r\n\r\n<ul>\r\n<li>student name and age</li>\r\n<li>parents' contact information</li>\r\n<li>student allergies and dietary requirements</li>\r\n<li>\r\n\r\n<p>You should also include a basic release form with the enrollment (a sample can be found in the <a href=\"https://github.com/mechanicalgirl/young-coders-tutorial\" target=\"new\">repository</a>). This ensures that parents are aware, among other things, that students may sometimes be unattended, and that you expect students to be picked up by a legal guardian at the end of the class.</p>\r\n\r\n<p>Open applications about two months before your event - this gives you plenty of time to promote and get the word out.</p>\r\n\r\n<p>And prepare for an exuberant response - you'll probably want to maintain a waitlist.</p>\r\n\r\n<h3>What to expect</h3>\r\n\r\n<p>Your students will be the best students ever. They'll already be in a classroom mindset - the one thing they know best at this age is how to learn, because it's something they do every day. You will have to battle with some distractions, but for the most part your students will be eager and attentive.</p>\r\n\r\n<p>They won't <i>have</i> to be there - they'll <i>want</i> to be there. They'll be in your class because they're excited about what you have to teach them.</p>\r\n\r\n<p>That enthusiasm will be infectious.</p>\r\n"}, "model": "teaching.step", "pk": 11}, {"fields": {"step_number": 6, "image": "", "step_name": "Equipment", "description": "(projector)\r\n\r\n<br>\r\n\r\n<h3>Resources</h3>\r\n\r\n<p>If you do decide to teach a kids' class, getting the physical resources will be the biggest hurdle.  I would recommend looking into getting a bulk order of Raspberry Pis - besides being simple to set up and guaranteeing that each student has a workstation, sending the kids home with them is a great way to give them a head start and ensure that they'll continue to be interested in computing down the road.</p>\r\n\r\n<p>Of course, to be complete, you'll also also need monitors, keyboards and mice, as well as HDMI cables, micro-USB power supplies, etc.  I'm no expert on Raspberry Pi setup, but there is a <a href=\"http://www.raspberrypi.org/quick-start-guide\">quick start guide here</a> that should get you started.  The cards should be fairly cheap to buy in bulk, particularly if they're not pre-imaged (you'll have to decide if you're willing to do the work yourself and maybe save some money).  And for the Young Coder tutorial at PyCon, we rented the peripherals - look for computer accessory or office supply rentals in your area.</p>\r\n\r\n<h3>Raspberry Pi</h3>\r\n\r\n<p>Thanks to a deal struck between <a href=\"https://www.gittip.com/jnoller/\">Jesse Noller</a> and the <a href=\"http://www.raspberrypi.org/about\">Raspberry Pi Foundation</a>, all of our students were working on Raspberry Pis (which they were allowed to take home after the class).</p>\r\n\r\n<p>The RPis were perfect, simple computing machines for the lessons we were teaching, but we discovered that we had to keep examples simple - once the kids learned how to perform math and string operations they started pushing the limits of their little RPis' processing power by trying operations that could force memory errors (such as multiplying a string by a very large number).  I don't think you'd ever see that kind of experimentation in a classroom full of adults, who would more likely do everything in their power <i>not</i> to break their computers, but these kids were fearless with their experimentation.  And besides, when the machines got bogged down, it was simple enough to unplug and reboot.</p>\r\n\r\n<p>In conjunction with these tutorials and some of the other RPi related events at this year's PyCon, the PSF also contracted this site from <a href=\"http://www.caktusgroup.com/\">Caktus Group</a> as a place to find and share projects that you can build with your own Raspberry Pi:</p>\r\n\r\n<p><a href=\"http://raspberry.io/\">raspberry.io</a></p>\r\n\r\n<h3>Idle</h3>\r\n\r\n<p>We used the Raspbian OS on pre-imaged cards that contained, among other things, a terminal app and a few different Idle clients, which caused a bit of confusion.</p>\r\n\r\n<p>I did enjoy teaching with Idle in spite of some of its limitations - I think that when I teach this class again, I'd like to make more of an effort to explain the differences between Idle and a regular Python shell.  Also, the slides I developed for this class were written with the shell in mind, so I managed to confuse the first day's students until we figured out what was going on (I didn't realize until we were well into the material that they were all using Idle, so the indentation I was using in my examples required a little bit of explanation).</p>\r\n"}, "model": "teaching.step", "pk": 12}, {"fields": {"step_number": 1, "image": "", "step_name": "About The Curriculum", "description": "<h3>Designed to be taught in one day</h3>\r\n\r\n<p>This curriculum starts with simple tasks and gradually adds more complex terms and programming concepts along the way.</p>\r\n\r\n<p>The content is split into small segments - this allows for natural break times, and for multiple teachers to balance the classroom management load by trading off.</p>\r\n\r\n<p>This cumulative curriculum could leave students with some heavier concepts to deal with at the end of a long day, when their brains are tired. But free time at the end allows students to play with the new coding skills they've learned, ensuring that everyone is still energetic and inspired when the day ends.</p>\r\n\r\n<h3>Beginner level</h3>\r\n\r\n<p>You'll see that this is a beginner level class and not a thorough overview of the Python programming language. There is a limit to the amount that you can teach in a day, so there were some deliberate choices made about what to include and what to leave out. However, we do provide additional resources so that students can learn about more concepts later as they continue their coding education.</p>\r\n\r\n<h3>Open-ended</h3>\r\n\r\n<p>The curriculum is deliberately open-ended - if you cover the material in less than the time allotted, you can always spend the extra time reviewing more code samples (you'll see that the repository where the slides are housed also contains a state capitals quiz and a number guessing game, among other things).</p>\r\n\r\n<p>When this class is taught at PyCon, we typically take the first three quarters of the day to work through the slides, an hour or so doing live demos of Minecraft or PyGames coding, followed finally by some free time. Students can then work independently, exploring their new skills with teaching assistants nearby to answer questions as needed.</p>\r\n\r\n<h3>Comprehensible</h3>\r\n\r\n<p>This material is comprehensible for students of different ages and experience levels. It has been used to teach adult beginner classes as well. A beginner is a beginner is a beginner. Once children are old enough to comprehend abstract concepts (and have the physical skill to type on a keyboard), they're capable of learning what an adult would. (Young students just might need a little more humor and energy in the delivery to keep the material engaging.)</p>"}, "model": "teaching.step", "pk": 13}, {"fields": {"step_number": 2, "image": "", "step_name": "Teaching The Class", "description": "<h3>Yes, you can teach.</h3>\r\n\r\n<p>You should have some Python programming experience to teach this material, but you do not necessarily need teaching experience.</p>\r\n\r\n<p>The curriculum we use at PyCon is taught in a presentation style - that is, we use a slide deck with speaker notes, projected from a computer that also has Python/Idle installed (so that we can alternate between the slides and demonstrating coding tasks).</p>\r\n\r\n<p>So you should be somewhat comfortable speaking in front of a room.</p>\r\n\r\n<p>But if you've never taught younger students before, or are not sure how to explain some Python concepts to beginners, the speaker notes function as a script to help you along.</p>\r\n\r\n<h3>The classroom materials</h3>\r\n\r\n<p>Take some time to read over the slides - the latest class materials are available in Keynote and PowerPoint formats at this GitHub repository:</p>\r\n\r\n<p><a href=\"http://github.com/mechanicalgirl/young-coders-tutorial\" target=\"new\">http://github.com/mechanicalgirl/young-coders-tutorial</a></p>\r\n\r\n<p>Remember, you're always free fork and remix them in whatever way you wish - edit the content to personalize it for your class.</p>\r\n\r\n<p>And if you have questions, feel free to leave comments on the repository, or contact the administrators of this site at admin@letslearnpython.com.</p>\r\n\r\n<p>There are a few organizing steps you'll need to take to get your class off the ground - we'll cover those a bit later. But for now, here's some advice for when the day of your class finally arrives.</p>\r\n\r\n<h3>Take your time</h3>\r\n\r\n<p>Relax. Make friends with your students. Keep an eye on how they're doing. Rely on your teaching assistants and your own observation to determine if they're overwhelmed or bored**.</p>\r\n\r\n<p>** How to tell if a thing is overwhelming - if the kids look panicked, slow down; if they start to glaze over, you're good, just move on.\r\n\r\n<p>Throughout the slide deck, there are code examples for the students to run in Idle:</p>\r\n\r\n<ul>\r\n<li>Give students plenty of time to type and run those examples for themselves.</li>\r\n<li>Once you're sure everyone has finished, switch over to Idle and demonstrate the examples for them.</li>\r\n</ul>\r\n\r\n<p>Be sure and give the students time to catch up after each exercise. Young students won't be able to type as quickly as you do. Younger students may struggle and then give up if you move too quickly, and older students may rush ahead, so keeping an even pace can be a bit of a balancing act. After each new exercise, do something like getting a show of hands to confirm that everyone's getting it before you move on to the next topic.</p>\r\n\r\n<p>If you do add code examples to the slides, try not to add things like long variable names or very complex expressions that take a long time to type. Running code examples for themselves is the best way to develop an understanding, but for kids, the physical act of typing can be a time-consuming exercise that draws focus from learning. Again, it's a balancing act, but something you'll get a feel for quickly.</p>\r\n\r\n<h3>Take breaks</h3>\r\n\r\n<p>Build in plenty of breaks for bathroom and snacks throughout the day. This class is a lot to take in over the course of a single day, and every student needs time for their brains to rest.</p>\r\n\r\n<p>You should also give yourself some time to regroup, and give students some free hack time to experiment with their new skills.</p>\r\n\r\n<p>You'll probably find that the most fun parts of the day are those moments in between teaching, when you can interact with the kids one on one and find out what they're really excited about doing with their newfound knowledge.</p>"}, "model": "teaching.step", "pk": 14}, {"fields": {"step_number": 7, "image": "", "step_name": "Books And Projects", "description": "<h3>Books</h3>\r\n\r\n<p>We also sent our students home with two books, again thanks to generous sponsor donations:</p>\r\n\r\n<ul class=\"teach\">\r\n<li><a href=\"http://www.amazon.com/Python-Kids-Playful-Introduction-Programming/dp/1593274076/\">Python for Kids: A Playful Introduction to Programming</a></li>\r\n<li><a href=\"http://www.amazon.com/Hello-World-Computer-Programming-Beginners/dp/1933988495/\">\"Hello World! Computer Programming for Kids and Other Beginners</a></li>\r\n</ul>\r\n\r\n<h3>Projects</h3>\r\n\r\n<p>Finally, if you can't get book donations, be sure to recommend a few follow up projects for when the kids get home.</p>  \r\n\r\n<ul class=\"teach\">\r\n<li>The <a href=\"http://learnpythonthehardway.org/\">Learn Python The Hard Way</a> exercises are probably simple enough for a young student to get through.</li>\r\n<li><a href=\"http://inventwithpython.com/\">Invent Your Own Computer Games with Python</a> is free online, and includes a Pygame tutorial.</li>\r\n<li><a href=\"http://python4kids.wordpress.com/\">Python Tutorials for Kids 8+</a> has some fun example exercises, although they're presented in blog format, so they're not in any particular order.</li>\r\n</ul>\r\n"}, "model": "teaching.step", "pk": 15}, {"fields": {"step_number": 5, "image": "", "step_name": "Venue", "description": "..."}, "model": "teaching.step", "pk": 16}]