[{"fields": {"step_number": 5, "image": "", "step_name": "Teachers", "description": "<h3>Teachers</h3>\r\n\r\n<p><i>find one other person to help, but if you are not going to teach this material yourself (but we believe you can!) make sure you have two teachers - two teachers allow you to take frequent breaks (alternate segments) - look to local user groups</i></p>\r\n\r\n<h3>Enlist volunteer teaching assistants</h3>\r\n\r\n<p>Volunteers are crucial - each student has unique needs and levels of understanding, so with both age groups, we relied heavily on one-on-one help to get the students through some of the tougher concepts.  A 1:3 ratio of students to volunteers would not be overdoing it.</p>\r\n\r\n<p>The one thing that we asked was that volunteers wait until break times to make remarks about the content. We felt that it was important to avoid derailing the class with interruptions, and that any errors or missed content could be taken care of later. We wanted to keep the focus on the students, rather than on the slides.</p>\r\n"}, "model": "teaching.step", "pk": 8}, {"fields": {"step_number": 2, "image": "", "step_name": "Sponsors", "description": "<br>\r\ndecide how much money you need (see the budget page)<br>\r\n<br>\r\nsponsors can provide other things than money, like meals and classroom location<br>\r\n<br>\r\nreach out to local companies<br>\r\n<br>\r\nrequest a grant from the PSF<br>\r\n<br>\r\nmay need to provide them with forms (W-9?)<br>\r\n<br>\r\nsetting up a PayPal account provides an easy way for sponsors to send money, but be aware that there will be service fees subtracted<br>"}, "model": "teaching.step", "pk": 9}, {"fields": {"step_number": 1, "image": "", "step_name": "Money", "description": "<br>\r\nunfortunately the first thing you'll have to think about<br>\r\n<br>\r\nmake a budget, decide how much you'll need<br>\r\n<br>\r\nwhat you'll need money for (some of these things might be donated):\r\n<ul>\r\n<li>classroom space\r\n<li>computer equipment - this cost will depend on what setup you decide to use \r\n<li>books are optional\r\n<li>meals and snacks are not optional (maybe breakfast, definitely lunch, morning and afternoon snacks, water and other drinks)\r\n</ul>\r\ncheck your state's laws and consult with your bank - you may be able to open a bank account to handle the money for your event - in TX I had to file DBA paperwork, but then I was able to open an account, and since all the money I received was spent on the event (or donated), I didn't have to file any tax paperwork at the end of the year, but YMMV<br>\r\n<br>\r\nmake a budget and stick to it<br>\r\n<br>\r\nkeep copies of ALL invoices and paperwork<br>\r\n"}, "model": "teaching.step", "pk": 10}, {"fields": {"step_number": 4, "image": "", "step_name": "Students", "description": "<br>\r\nrecommend limiting the class to 25-30 students - any more than that and the noise and activity level in the classroom can be distracting, especially when there are volunteers/teaching assistants working with the kids<br>\r\n<br>\r\nuse a service like EventBrite to take student applications<br>\r\n<br>\r\nrecommended age - 12 and older, but use your discretion - remember that basic typing skills are going to matter, and even a bright younger child might not be able to type fast enough to keep up<br>\r\n<br>\r\nthe only information you need is basic contact information, parents' contact information, and the student's age<br>\r\n<br>\r\nopen applications about a month and a half before your event - this gives you plenty of time to promote it and get the word out<br>\r\n<br>\r\nthe response will be enthusiastic - maintain a wait list - you may have last minute dropouts<br>\r\n<br>"}, "model": "teaching.step", "pk": 11}, {"fields": {"step_number": 3, "image": "", "step_name": "Computer Equipment", "description": "<h3>Resources</h3>\r\n\r\n<p>If you do decide to teach a kids' class, getting the physical resources will be the biggest hurdle.  I would recommend looking into getting a bulk order of Raspberry Pis - besides being simple to set up and guaranteeing that each student has a workstation, sending the kids home with them is a great way to give them a head start and ensure that they'll continue to be interested in computing down the road.</p>\r\n\r\n<p>Of course, to be complete, you'll also also need monitors, keyboards and mice, as well as HDMI cables, micro-USB power supplies, etc.  I'm no expert on Raspberry Pi setup, but there is a <a href=\"http://www.raspberrypi.org/quick-start-guide\">quick start guide here</a> that should get you started.  The cards should be fairly cheap to buy in bulk, particularly if they're not pre-imaged (you'll have to decide if you're willing to do the work yourself and maybe save some money).  And for the Young Coder tutorial at PyCon, we rented the peripherals - look for computer accessory or office supply rentals in your area.</p>\r\n\r\n<h3>Raspberry Pi</h3>\r\n\r\n<p>Thanks to a deal struck between <a href=\"https://www.gittip.com/jnoller/\">Jesse Noller</a> and the <a href=\"http://www.raspberrypi.org/about\">Raspberry Pi Foundation</a>, all of our students were working on Raspberry Pis (which they were allowed to take home after the class).</p>\r\n\r\n<p>The RPis were perfect, simple computing machines for the lessons we were teaching, but we discovered that we had to keep examples simple - once the kids learned how to perform math and string operations they started pushing the limits of their little RPis' processing power by trying operations that could force memory errors (such as multiplying a string by a very large number).  I don't think you'd ever see that kind of experimentation in a classroom full of adults, who would more likely do everything in their power <i>not</i> to break their computers, but these kids were fearless with their experimentation.  And besides, when the machines got bogged down, it was simple enough to unplug and reboot.</p>\r\n\r\n<p>In conjunction with these tutorials and some of the other RPi related events at this year's PyCon, the PSF also contracted this site from <a href=\"http://www.caktusgroup.com/\">Caktus Group</a> as a place to find and share projects that you can build with your own Raspberry Pi:</p>\r\n\r\n<p><a href=\"http://raspberry.io/\">raspberry.io</a></p>\r\n\r\n<h3>Idle</h3>\r\n\r\n<p>We used the Raspbian OS on pre-imaged cards that contained, among other things, a terminal app and a few different Idle clients, which caused a bit of confusion.</p>\r\n\r\n<p>I did enjoy teaching with Idle in spite of some of its limitations - I think that when I teach this class again, I'd like to make more of an effort to explain the differences between Idle and a regular Python shell.  Also, the slides I developed for this class were written with the shell in mind, so I managed to confuse the first day's students until we figured out what was going on (I didn't realize until we were well into the material that they were all using Idle, so the indentation I was using in my examples required a little bit of explanation).</p>\r\n"}, "model": "teaching.step", "pk": 12}, {"fields": {"step_number": 6, "image": "", "step_name": "About The Curriculum", "description": "<h3>Designed to be taught in one day</h3>\r\n\r\n<p>The model we used was to start simple and gradually add more complex terms and concepts along the way.  That did leave students with some heaver concepts to deal with at the end of a long day when their brains were tired, but we built in time at the end to allow the kids to play around with the new coding skills they'd learned, so they all still seemed pretty energetic and inspired when the day ended.</p>\r\n\r\n<h3>Beginner level class</h3>\r\n\r\n<p>You'll see that this is a beginner level class and not a complete overview. There is a limit to the amount that we felt we could teach in a day, so we had to make deliberate choices about what to include and what to leave out, trusting that the students will learn about those concepts later as they continue their self-education.</p>\r\n\r\n<h3>Open-ended</h3>\r\n\r\n<p>We had no idea how quickly or slowly our young students would learn, so the class was deliberately open-ended - we figured that if we covered the material in less than the time allotted, we could spend the extra time reviewing more code samples (you'll see that the repository where the slides are housed also contains a state capitals quiz and a number guessing game).</p>\r\n\r\n<p>Our original plan was to spend the first half of each day working through the slides, then the last half reviewing Katie's game code and having her put her extraordinary live coding skills to work showing the kids new examples.</p>\r\n\r\n<p>As it actually worked out, with the group of younger students we got through the full set of slides and had just enough time to review Katie's Raspberry Rogue code and the number guessing game before the class ended.</p>\r\n\r\n<p>But with the older group, it only took about four hours to get through the slides.  With the last half of the day, we covered Raspberry Rogue and the other game examples, then added some off the cuff discussion of open source, and pointed them at a few additional learning resources that they could follow up with (LPTHW and Coding Bat).</p>\r\n\r\n<h3>Comprehensible</h3>\r\n\r\n<p>The same material was comprehensible for students of different ages and experience levels - the only notable difference was the amount of time it took for each age group to work through everything.</p>\r\n\r\n<p>In fact, the slides were adapted from materials that I developed for an adult Intro to Python class.  My theory is that a beginner is a beginner, and that once children have reached an age where their brains are developed enough to comprehend abstract concepts, they're capable of learning what an adult would.  (I should point out, though, that the kids need a little more humor and energy in the delivery to keep the material engaging.)</p>\r\n"}, "model": "teaching.step", "pk": 13}, {"fields": {"step_number": 7, "image": "", "step_name": "Teaching The Class", "description": "<h3>Take your time</h3>\r\n\r\n<p>Where there are examples in the slides:</p>\r\n<ul>\r\n<li>Give the students time to type and run examples themselves</li>\r\n<li>Then switch over to Idle and demonstrate the examples for them</li>\r\n</ul>\r\n\r\n<p>Be sure and give the students time to catch up after each exercise.  Young students won't be able to type as quickly as you do.  We saw some students struggle and then give up if we moved too quickly.  After each new exercise, do something like getting a show of hands to confirm that everyone's getting it before you move on to the next topic.</p>\r\n\r\n<p>And whatever you do, don't make the mistake I did on the first day and give the kids variable names that are miles long.  I thought I was being uber-descriptive, but instead I was just adding typing time that would have been better used on understanding.</p>\r\n\r\n<p>Incidentally, once the kids know that they can type along, they'll try to type everything exactly as shown until they get comfortable enough to play around.</p>\r\n\r\n<h3>Take breaks</h3>\r\n\r\n<p>Build in plenty of breaks for bathroom and snacks (and to give yourself some time to regroup), and give students some hack time to experiment with their new skills.</p>\r\n\r\n\r\n<h1>The materials</h1>\r\n\r\n<p>Here are the slides - fork and remix them in whatever way you wish:</p>\r\n\r\n<p><a href=\"http://github.com/mechanicalgirl/young-coders-tutorial\">http://github.com/mechanicalgirl/young-coders-tutorial</a></p>\r\n\r\n<p>Some code samples are included in that repo, but Katie's game code is here:</p>\r\n\r\n<p><a href=\"http://github.com/kcunning/Katie-s-Rougish-PyGame\">http://github.com/kcunning/Katie-s-Rougish-PyGame</a></p>\r\n\r\n<p>And if you have questions, feel free to contact either of us.  I can be reached at barbara dot shaurette at gmail dot com, and you can find Katie Cunningham contact information through her blog: <a href=\"http://therealkatie.net\">http://therealkatie.net</a></p>\r\n\r\n<br>"}, "model": "teaching.step", "pk": 14}, {"fields": {"step_number": 8, "image": "", "step_name": "Books And Projects", "description": "<h3>Books</h3>\r\n\r\n<p>We also sent our students home with two books, again thanks to generous sponsor donations:</p>\r\n\r\n<ul class=\"teach\">\r\n<li><a href=\"http://www.amazon.com/Python-Kids-Playful-Introduction-Programming/dp/1593274076/\">Python for Kids: A Playful Introduction to Programming</a></li>\r\n<li><a href=\"http://www.amazon.com/Hello-World-Computer-Programming-Beginners/dp/1933988495/\">\"Hello World! Computer Programming for Kids and Other Beginners</a></li>\r\n</ul>\r\n\r\n<h3>Projects</h3>\r\n\r\n<p>Finally, if you can't get book donations, be sure to recommend a few follow up projects for when the kids get home.</p>  \r\n\r\n<ul class=\"teach\">\r\n<li>The <a href=\"http://learnpythonthehardway.org/\">Learn Python The Hard Way</a> exercises are probably simple enough for a young student to get through.</li>\r\n<li><a href=\"http://inventwithpython.com/\">Invent Your Own Computer Games with Python</a> is free online, and includes a Pygame tutorial.</li>\r\n<li><a href=\"http://python4kids.wordpress.com/\">Python Tutorials for Kids 8+</a> has some fun example exercises, although they're presented in blog format, so they're not in any particular order.</li>\r\n</ul>\r\n"}, "model": "teaching.step", "pk": 15}]