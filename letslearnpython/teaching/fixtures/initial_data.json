[{"fields": {"step_number": 4, "image": "", "step_name": "Teaching Assistants", "description": "<img src=\"/static/teaching/images/its-dangerous-to-go-alone.jpg\" height=\"225px\" align=\"right\" style=\"margin: 5px\">\r\n\r\n<h3>Find a co-teacher</h3>\r\n\r\n<p>Work with at least one other person to lead the class. Co-teachers can work efficiently in tandem, allowing each other to take frequent breaks by alternating segments. This approach also allows each teacher time to circulate throughout the classroom, engaging with students.</p>\r\n\r\n<h3>Enlist volunteer teaching assistants</h3>\r\n\r\n<p>Additional volunteers are crucial - every student has unique needs and levels of understanding, and one-on-one help can get students through some of the tougher concepts. A 1:3 ratio of students to volunteers would not be overdoing it.</p>\r\n\r\n<p>Your teaching assistants should have some Python experience, but of course teaching experience is not necessary. Their job will be to move around the room during the class presentation, keeping an eye out for struggling students and answering questions as needed.</p>\r\n\r\n<p>Volunteers should wait until break times to make remarks about the content, to avoid derailing the class with interruptions. Keep the focus on the students, rather than on the slides.</p>\r\n"}, "model": "teaching.step", "pk": 8}, {"fields": {"step_number": 9, "image": "", "step_name": "Sponsors", "description": "<h3>Sponsorship money</h3>\r\n\r\n<p>\r\n  Once you know how much money you'll need, where do you find it?\r\n</p>\r\n\r\n<ul>\r\n  <li>\r\n    <p><b>Request a grant from the Python Software Foundation</b></p>\r\n    <p>Start here. The PSF has a very generous Grants Program designed to support Python-related events and activities, including educational programs!</p>\r\n    <p>A complete, detailed description of the process can be found on <a href=\"https://www.python.org/psf/grants/\" target=\"new\">Python.org's PSF Grants page</a>.</p>\r\n    <p>From the FAQ:\r\n      <ul>\r\n      \t\"The maximum educational program grant size is typically USD 25 per student, provided the students each receive at least 6 hours of Python instruction ... If the class has an educational hardware component such as a Raspberry Pi that the students get to keep, you may request up to USD 50 per student.\"\r\n      </ul>\r\n    </p>\r\n    <p>So, for a class of 30 students, you could request up to $1500.</p>\r\n  </li>\r\n  <li>\r\n    <p>A PSF grant will cover the majority of your classroom expenses, but if your budget calls for a little more:</p>\r\n    <p><b>Reach out to technology companies that use Python</b></p>\r\n    <p>If you're a Python developer yourself, start with your own employer.</p>\r\n    <p>After that, move on to other companies involved in the Python community. Look to Python event web sites to find out who sponsors them. Check with your local Python user group to see who can contact their own employers.</p>\r\n    <p>When you contact these companies, always be polite and professional. A quick Google search will turn up a number of email templates you can use to format your request:</p>\r\n    <p>\r\n      <a href=\"http://www.wikihow.com/Write-a-Letter-Requesting-Sponsorship\" target=\"new\">(1)</a> \r\n      <a href=\"http://www.letters.org/donation-letter/sample-sponsorship-request-letter.html\" target=\"new\">(2)</a> \r\n      <a href=\"http://www.the-fund-raiser.com/event-sponsorship-letter/\" target=\"new\">(3)</a> \r\n      <a href=\"http://www.prhelper.com/templates/sponsorship-proposal.php\" target=\"new\">(4)</a>\r\n    </p>\r\n  </li>\r\n  <li>\r\n    <p><b>Contact local companies and civic organizations</b></p>\r\n    <p>It's a good idea to cultivate local sponsor relationships - you never know, you may have so much fun that you find yourself wanting to teach this class again and again!</p>\r\n    <p>Even local companies that don't work directly with technology have a vested interest in improving computer science education in their communities.\r\n    <p>Try children's museums and universities - the same places you might be looking to for venues.</p>\r\n    <p>And don't count out local restaurants and small retail businesses - a few hundred dollars is a small price for good publicity for them, and will go a long way for your students.</p>\r\n  </li>\r\n  <li>\r\n    <p><b>Other education grants</b></p>\r\n    <p>Did you know that the U.S. Department of Education administers a <a href=\"http://www2.ed.gov/fund/grants-apply.html?src=pn\" target=\"new>grants program</a>? Click through to their <a href=\"http://www2.ed.gov/programs/find/elig/index.html?src=banner\" target=\"new\">Eligibility</a> page to find out if there are funds available to help support your class.</p>\r\n</ul>\r\n\r\n<p>Setting up a PayPal account provides an easy way for sponsors to send money, but be aware that there will be service fees subtracted.</p>\r\n"}, "model": "teaching.step", "pk": 9}, {"fields": {"step_number": 8, "image": "", "step_name": "Budget", "description": "<h3>What you'll need to buy</h3>\r\n\r\n<p>Get donations wherever you can, but some of the things you'll need to put on a class - food, computer equipment, books - are going to cost money.</p>\r\n\r\n<p>One of the first things you should do when you start planning is make a budget and decide how much you'll need.</p>\r\n\r\n<p>Start by deciding how many students you want to plan for and keep that in mind when calculating the cost of each of these things:</p>\r\n\r\n<ul></p>\r\n\t<li>Raspberry Pis and their components, such as power supplies and SD cards. Ordering these in kits will make your life easier, but may cost a bit more.</li>\r\n\t<li>Computer peripherals - you'll also need a monitor, keyboard and mouse for each student. As covered in the <a href=\"/teach/step/6/\">Equipment</a> section, these can usually be rented from a local business or office supply for a nominal cost.</li>\r\n\t<li>Power strips, extension cords, and other accessories. Depending on what the classroom space provides, you may need to run power to some of the workstations.</li>\r\n\t<li>Meals and snacks are not optional. Depending on what time your class starts, you may need to provide breakfast. But you definitely need to offer:\r\n\t  <ul>\r\n\t    <li>\r\n\t      Lunch. You don't need to spring for fancy catering - check around for local delis or takeout restaurants that may be able to provide box lunches (bonus points if they'll deliver!)(but remember to factor a tip for delivery into your budget!). If you have allergies among your students, places like Whole Foods can accommodate most dietary restrictions.\r\n\t    </li>\r\n\t    <li>Don't forget to order lunch for yourself and your teaching assistants!</li>\r\n\t    <li>\r\n\t      Mid-morning and mid-afternoon snacks. You should also have water and other drinks available throughout the day. For these items, try Costco or Sam's Club - boxes of granola bars, bulk fruit, and flats of water and juice will help keep everyone's energy up through the day.\r\n\t    </li>\r\n\t  </ul>\r\n\t</li>\r\n\t<li>Books are optional, but a nice thing to have. If you get extra sponsorship money or donations, keep these in mind.</li>\r\n</ul>\r\n\r\n<p>Make a budget and stick to it.</p>\r\n\r\n<h3>Managing the money</h3>\r\n\r\n<p>Check your state's laws and consult with your bank - you may be able to open a special bank account to handle the money for your event. In some states you'll need to file DBA paperwork.</p>\r\n\r\n<p>Keep copies of all of your invoices and other paperwork. If all the money you receive (from donations or sponsors) is spent on the event (or donated), you shouldn't need to pay taxes on it. However, you may have to file a Schedule C so make sure you can account for all of it.</p>\r\n"}, "model": "teaching.step", "pk": 10}, {"fields": {"step_number": 3, "image": "", "step_name": "Students", "description": "<h3>Where to find students</h3>\r\n\r\n<p>If you've decided to teach a beginner programming class, you are in a unique position to change a life. You can open doors that might otherwise remain closed for some students, by extending an invitation to young students who might not be exposed to computers and programming in their schools or at home.</p>\r\n\r\n<p>You can reach out to local chapters of <a href=\"http://www.bgca.org/\" target=\"new\">Boys & Girls Clubs</a> and <a href=\"http://www.bbbs.org/\" target=\"new\">Big Brothers Big Sisters</a>. Local STEM education groups can also be great resources, as can local programming meetups.</p>\r\n\r\n<h3>Age and class size constraints</h3>\r\n\r\n<p>Your class should probably be limited to about 25-30 students. Any more than that and the noise and activity level in the classroom can be distracting, especially when there are volunteers/teaching assistants working alongside the kids.</p>\r\n\r\n<p>The recommended age for this class is 12 years and older, but use your discretion. Students as young as 10 could be eligible, but you might want to steer them towards graphical interface learning tools such as Scratch and Hopscotch instead.</p>\r\n\r\n<p>Remember that students need to have reached a certain point in their cognitive development to be able to work with some of the abstract concepts common to modern computing.</p>\r\n\r\n<p>Basic typing skills are also going to matter - even a bright younger child might not be able to type quickly enough to keep up, and that can impair the learning experience.</p>\r\n\r\n<p>Both of those things need to be in place for this material to be useful and comprehensible to students.</p>\r\n\r\n<h3>Enrollment</h3>\r\n\r\n<p>Once you've settled on a date and venue and have planning well underway, use a free service like <a href=\"www.eventbrite.com\" target=\"new\">EventBrite</a> to take student applications.</p>\r\n\r\n<p>You'll need some basic information from your students and their parents/guardians:</p>\r\n\r\n<ul>\r\n<li>student name and age</li>\r\n<li>parents' contact information</li>\r\n<li>student allergies and dietary requirements</li>\r\n<li>\r\n</ul>\r\n\r\n<p>You should also include a basic release form with the enrollment (a sample can be found in the <a href=\"https://github.com/mechanicalgirl/young-coders-tutorial\" target=\"new\">repository</a>). This ensures that parents are aware, among other things, that students may sometimes be unattended, and that you expect students to be picked up by a legal guardian at the end of the class.</p>\r\n\r\n<p>Open applications about two months before your event - this gives you plenty of time to promote and get the word out.</p>\r\n\r\n<p>And prepare for an exuberant response - you'll probably want to maintain a waitlist.</p>\r\n\r\n<h3>What to expect</h3>\r\n\r\n<p>Your students will be the best students ever. They'll already be in a classroom mindset - the one thing they know best at this age is how to learn, because it's something they do every day. You will have to battle with some distractions, but for the most part your students will be eager and attentive.</p>\r\n\r\n<p>They won't <i>have</i> to be there - they'll <i>want</i> to be there. They'll be in your class because they're excited about what you have to teach them.</p>\r\n\r\n<p>That enthusiasm will be infectious.</p>\r\n"}, "model": "teaching.step", "pk": 11}, {"fields": {"step_number": 6, "image": "", "step_name": "Equipment", "description": "<h3>Resources</h3>\r\n\r\n<p>Look into getting a bulk order of Raspberry Pis, or RPi kits - besides being simple to set up and guaranteeing that each student has a consistent workstation, sending the kids home with them is a great way to give them a head start and ensure that they'll continue to be interested in computing down the road.</p>\r\n\r\n<p>To be complete, you'll also also need monitors, keyboards and mice, as well as HDMI cables, micro-USB power supplies, etc. Everything you need, along with setup and installation instructions, is covered <a href=\"/learn/lesson/1/step/1/\">here</a>. There is also a setup guide in the <a href=\"https://github.com/mechanicalgirl/young-coders-tutorial\" target=\"new\">GitHub repository</a>.</p>\r\n\r\n<h3>Raspberry Pi</h3>\r\n\r\n<p>All of our students at PyCon work on Raspberry Pis (which they take home after the class).</p>\r\n\r\n<p>The RPis are simple computing machines, perfect for the lessons in this class.</p>\r\n\r\n<p>On earlier versions of the Pi, examples had to be kept simple - once the kids learned how to perform math and string operations they started pushing the limits of the RPis' processing power by trying operations that could force memory errors (such as multiplying a string by a very large number).</p>\r\n\r\n<p>These kids were fearless with their experimentation. But when the machines got bogged down, it was simple enough to unplug, reboot, and continue on.</p>\r\n\r\n<h3>Additional equipment</h3>\r\n\r\n<p>Along with the Raspberry Pi itself, you'll need a few other small pieces of equipment. These days, it's easy to get most of the things you need in a kit, such as <a href=\"https://www.amazon.com/CanaKit-Raspberry-Complete-Starter-Kit/dp/B01C6Q2GSY/\" target=\"new\">this one</a>. For more options, go onto Amazon or your favorite electronics web site and search for 'raspberry pi starter kit'.</p>\r\n\r\n<h3>Pieces you should have:</h3>\r\n\r\n<ul>\r\n  <li>Raspberry Pi</li>\r\n  <li><a href=\"https://www.raspberrypi.org/blog/raspberry-pi-official-case/\" target=\"new\">Protective case</a> (optional but recommended)</li>\r\n  <li><a href=\"https://www.amazon.com/CanaKit-Raspberry-Supply-Adapter-Charger/dp/B00MARDJZ4/\" target=\"new\">Micro USB power supply</a></li>\r\n  <li>A compatible <a href=\"https://www.raspberrypi.org/documentation/installation/sd-cards.md\" target=\"new\">SD card</a>, with <a href=\"https://www.raspberrypi.org/downloads/noobs/\" target=\"new\">NOOBS</a> installed (Most kits include a card that already has the NOOBS operating system installed - if you buy a card independently, you'll have to download NOOBS and install it yourself.)</li>\r\n</ul>\r\n\r\n<h3>Peripherals</h3>\r\n\r\n<p>Rent your peripherals - preferably from someone who can deliver and pick up. It'll cost a little extra, but you'll make up for it in time and headaches saved.</p>\r\n\r\n<ul>\r\n  <li>Keyboard and USB connector</li>\r\n  <li>Mouse and USB connector</li>\r\n  <li>Monitor and HDMI cable</li>\r\n</ul>\r\n\r\n<p>If you can't find rental places that specialize in computer accessories, check on general office supply rentals in your area.</p>\r\n\r\n<h3>Assembling workstations</h3>\r\n\r\n<p>It's probably a good idea to plan on setting up the classroom the night before, if you have access to the space. It can take some time, and you don't want unexpected bumps to derail you on the morning of the class. Your teaching assistant volunteers will probably be happy to help!</p>\r\n\r\n<p>Most Raspberry Pi kits will come with a guidebook for assembling all of the pieces to get your Raspberry Pi desktop up and running. The Raspberry Pi web site also has a <a href=\"https://www.raspberrypi.org/help/quick-start-guide/\" target=\"new\">Quick Start Guide</a> that explains all the parts of the computer and walks you through installation.</p>\r\n\r\n<p>Once the board is in its case, all the peripherals are hooked up, and the power supply is plugged in, turn on the monitor. You should see an installation screen.</p>\r\n\r\n<p>From that point on, use the <a href=\"https://github.com/mechanicalgirl/young-coders-tutorial/blob/master/2016/Beginner/Raspberry%20Pi%20setup%20for%20the%20Young%20Coders%20classroom%20-%20Beginner.pdf\" target=\"new\">setup guide in the GitHub repository</a> to guide you through any keyboard and localization changes you might need to make.</p>\r\n\r\n<h3>Idle</h3>\r\n\r\n<p>One important thing to note: Your NOOBS operating system will have Python installed already. You'll probably have both Python 2 and 3 - the materials for this class are written for Python 3.</p>\r\n\r\n<p>You'll also have a regular Python interpreter, but this class is designed to be taught using a program called <a href=\"https://docs.python.org/3/library/idle.html\" target=\"new\">Idle</a>. If you've never used Idle before, practice with it a little ahead of time. It's got functionality similar to the interactive shell you're probably used to, but with a few added extras, such as the ability to save and run scripts.</p>\r\n"}, "model": "teaching.step", "pk": 12}, {"fields": {"step_number": 1, "image": "", "step_name": "About The Curriculum", "description": "<h3>Designed to be taught in one day</h3>\r\n\r\n<p>This curriculum starts with simple tasks and gradually adds more complex terms and programming concepts along the way.</p>\r\n\r\n<p>The content is split into small segments - this allows for natural break times, and for multiple teachers to balance the classroom management load by trading off.</p>\r\n\r\n<p>This cumulative curriculum could leave students with some heavier concepts to deal with at the end of a long day, when their brains are tired. But free time at the end allows students to play with the new coding skills they've learned, ensuring that everyone is still energetic and inspired when the day ends.</p>\r\n\r\n<h3>Beginner level</h3>\r\n\r\n<p>You'll see that this is a beginner level class and not a thorough overview of the Python programming language. There is a limit to the amount that you can teach in a day, so there were some deliberate choices made about what to include and what to leave out. However, we do provide additional resources so that students can learn about more concepts later as they continue their coding education.</p>\r\n\r\n<h3>Open-ended</h3>\r\n\r\n<p>The curriculum is deliberately open-ended - if you cover the material in less than the time allotted, you can always spend the extra time reviewing more code samples (you'll see that the repository where the slides are housed also contains a state capitals quiz and a number guessing game, among other things).</p>\r\n\r\n<p>When this class is taught at PyCon, we typically take the first three quarters of the day to work through the slides, an hour or so doing live demos of Minecraft or PyGames coding, followed finally by some free time. Students can then work independently, exploring their new skills with teaching assistants nearby to answer questions as needed.</p>\r\n\r\n<h3>Comprehensible</h3>\r\n\r\n<p>This material is comprehensible for students of different ages and experience levels. It has been used to teach adult beginner classes as well. A beginner is a beginner is a beginner. Once children are old enough to comprehend abstract concepts (and have the physical skill to type on a keyboard), they're capable of learning what an adult would. (Young students just might need a little more humor and energy in the delivery to keep the material engaging.)</p>"}, "model": "teaching.step", "pk": 13}, {"fields": {"step_number": 2, "image": "", "step_name": "Teaching The Class", "description": "<h3>Yes, you can teach.</h3>\r\n\r\n<p>You should have some Python programming experience to teach this material, but you do not necessarily need teaching experience.</p>\r\n\r\n<p>The curriculum we use at PyCon is taught in a presentation style - that is, we use a slide deck with speaker notes, projected from a computer that also has Python/Idle installed (so that we can alternate between the slides and demonstrating coding tasks).</p>\r\n\r\n<p>So you should be somewhat comfortable speaking in front of a room.</p>\r\n\r\n<p>But if you've never taught younger students before, or are not sure how to explain some Python concepts to beginners, the speaker notes function as a script to help you along.</p>\r\n\r\n<h3>The classroom materials</h3>\r\n\r\n<p>Take some time to read over the slides - the latest class materials are available in Keynote and PowerPoint formats at this GitHub repository:</p>\r\n\r\n<p><a href=\"http://github.com/mechanicalgirl/young-coders-tutorial\" target=\"new\">http://github.com/mechanicalgirl/young-coders-tutorial</a></p>\r\n\r\n<p>Remember, you're always free fork and remix them in whatever way you wish - edit the content to personalize it for your class.</p>\r\n\r\n<p>And if you have questions, feel free to leave comments on the repository, or contact the administrators of this site at admin@letslearnpython.com.</p>\r\n\r\n<p>There are a few organizing steps you'll need to take to get your class off the ground - we'll cover those a bit later. But for now, here's some advice for when the day of your class finally arrives.</p>\r\n\r\n<h3>Take your time</h3>\r\n\r\n<p>Relax. Make friends with your students. Keep an eye on how they're doing. Rely on your teaching assistants and your own observation to determine if they're overwhelmed or bored**.</p>\r\n\r\n<p>** How to tell if a thing is overwhelming - if the kids look panicked, slow down; if they start to glaze over, you're good, just move on.\r\n\r\n<p>Throughout the slide deck, there are code examples for the students to run in Idle:</p>\r\n\r\n<ul>\r\n<li>Give students plenty of time to type and run those examples for themselves.</li>\r\n<li>Once you're sure everyone has finished, switch over to Idle and demonstrate the examples for them.</li>\r\n</ul>\r\n\r\n<p>Be sure and give the students time to catch up after each exercise. Young students won't be able to type as quickly as you do. Younger students may struggle and then give up if you move too quickly, and older students may rush ahead, so keeping an even pace can be a bit of a balancing act. After each new exercise, do something like getting a show of hands to confirm that everyone's getting it before you move on to the next topic.</p>\r\n\r\n<p>If you do add code examples to the slides, try not to add things like long variable names or very complex expressions that take a long time to type. Running code examples for themselves is the best way to develop an understanding, but for kids, the physical act of typing can be a time-consuming exercise that draws focus from learning. Again, it's a balancing act, but something you'll get a feel for quickly.</p>\r\n\r\n<h3>Take breaks</h3>\r\n\r\n<p>Build in plenty of breaks for bathroom and snacks throughout the day. This class is a lot to take in over the course of a single day, and every student needs time for their brains to rest.</p>\r\n\r\n<p>You should also give yourself some time to regroup, and give students some free hack time to experiment with their new skills.</p>\r\n\r\n<p>You'll probably find that the most fun parts of the day are those moments in between teaching, when you can interact with the kids one on one and find out what they're really excited about doing with their newfound knowledge.</p>"}, "model": "teaching.step", "pk": 14}, {"fields": {"step_number": 7, "image": "", "step_name": "Books And Projects", "description": "<h3>Books</h3>\r\n\r\n<p>If you can send your students home with books, it's a great way to keep them interested and motivated going forward. (And yes, kids do still read books!)</p>\r\n\r\n<p>Donated books are the best. <a href=\"https://www.nostarch.com/\" target=\"new\">No Starch Press</a> has been very generous with donations for PyCon over the years - it's worth <a href=\"https://www.nostarch.com/contactus.htm\" target=\"new\">contacting them</a> to see if they'll help out. Otherwise they have a great <a href=\"https://www.nostarch.com/academic.htm\" target=\"new\">group purchase program</a> (email <b>usergroups@nostarch.com</b> for more details).</p>\r\n\r\n<p>Some titles to consider from <a href=\"https://www.nostarch.com/\" target=\"new\">No Starch</a>:</p>\r\n\r\n<table>\r\n  <tr valign=\"top\">\r\n\t<td align=\"center\" width=\"33%\">\r\n          <img src=\"/static/teaching/images/pythonforkids_frontcover.jpg\" style=\"margin: 5px\">\r\n\t</td>\r\n\t<td align=\"center\" width=\"33%\">\r\n          <img src=\"/static/teaching/images/learntoprogramwithminecraft_cover.png\" style=\"margin: 5px\">\r\n\t</td>\r\n\t<td align=\"center\" width=\"33%\">\r\n          <img src=\"/static/teaching/images/pythonplayground_cover.png\" style=\"margin: 5px\">\r\n\t</td>\r\n  </tr>\r\n  <tr valign=\"top\">\r\n\t<td style=\"padding: 10px;\">\r\n          <a href=\"https://www.nostarch.com/pythonforkids\" target=\"new\">Python for Kids: A Playful Introduction to Programming</a><br>\r\n            by Jason R. Briggs\r\n\t</td>\r\n\t<td style=\"padding: 10px;\">\r\n            <a href=\"https://www.nostarch.com/programwithminecraft\" target=\"new\">Learn to Program with Minecraft</a><br>\r\n            by Craig Richardson\r\n\t</td>\r\n\t<td style=\"padding: 10px;\">\r\n          <a href=\"https://www.nostarch.com/pythonplayground\" target=\"new\">Python Playground</a><br>\r\n          by Mahesh Venkitachalam\r\n\t</td>\r\n  </tr>\r\n</table>  \r\n \r\n<p></p>\r\n\r\n<p>Another great title for younger students is <a href=\"https://www.manning.com/books/hello-world-second-edition\">Hello World! Computer Programming for Kids and Other Beginners</a> by Warren and Carter Sande. The publisher, <a href=\"http://www.manning.com\" target=\"new\">Manning</a>, also has a <a href=\"https://www.manning.com/placing-an-order\" target=\"new\">discount for group orders</a>.</p>\r\n\r\n<h3>Projects</h3>\r\n\r\n<p>Finally, if you can't get book donations, be sure to recommend a few follow up projects for your students to tackle when they get home.</p>\r\n\r\n<ul>\r\n<li>The <a href=\"http://learnpythonthehardway.org/\">Learn Python The Hard Way</a> exercises are probably simple enough for a young student to get through.</li>\r\n<li><a href=\"http://inventwithpython.com/\">Invent Your Own Computer Games with Python</a> is free online, and includes a Pygame tutorial.</li>\r\n<li><a href=\"http://python4kids.wordpress.com/\">Python Tutorials for Kids 8+</a> has some fun example exercises, although they're presented in blog format, so they're not in any particular order.</li>\r\n</ul>\r\n"}, "model": "teaching.step", "pk": 15}, {"fields": {"step_number": 5, "image": "", "step_name": "Venue", "description": "<h3>Classroom space</h3>\r\n\r\n<p>When choosing a venue, the size of the space is going to be an important consideration. </p>\r\n\r\n<p>You'll need enough space to set up a classroom for up to 30 students, with room for as many as 10 volunteers to circulate throughout.</p>\r\n\r\n<p>If possible, you should have a separate space for eating a mid-day meal (having students eat at their desks is fine but not ideal).</p>\r\n\r\n<p>And the classroom should be separated from other distraction zones as much as possible. It's best not to have a lot of foot traffic passing by, or looky-loos wandering in.</p>\r\n\r\n<h3>Furniture and equipment</h3>\r\n\r\n<p>Classroom furniture, such as tables or desks with access to power outlets, should be available to you.</p>\r\n\r\n<p>The venue should also provide a color projector and a screen, along with a podium or some kind of stand to house the laptop you'll be showing the slide presentation from.</p>\r\n\r\n<h3>Candidates</h3>\r\n\r\n<ul>\r\n  <li>Businesses and organizations will often volunteer their spaces when they know there's a good cause involved - you should not need to pay for a space to conduct this class.</li>\r\n  <li>Check with your local Python user group first - there may be a Python-friendly company in the area that can lend a large conference or meeting space over a weekend.</li>\r\n  <li>Next up, contact your local children's museums and science museums. Computing classes are right up their alley - just be sure they have an appropriate space (large-ish classroom with a projector).</li>\r\n  <li>Do you have a local university with a computer science hall? They might be willing to donate use of one of their classroom spaces for a day, but you'll probably have to work around their schedule.</li>\r\n  <li>STEM/hacker spaces and coworking spaces are also great resources, as are schools and community colleges.</li>\r\n  <li>Finally, if there's a local conference or other programming event going on that has extra meeting space, see if you can join them - it's a great way to contribute to the community and encourage attendance/volunteers.</li>\r\n</ul>"}, "model": "teaching.step", "pk": 16}]