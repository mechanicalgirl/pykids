[{"fields": {"description": "An introduction to the basic concepts of programming", "number": 2, "name": "Introduction"}, "model": "lessons.lesson", "pk": 1}, {"fields": {"description": "Using Python to do math!", "number": 3, "name": "Math"}, "model": "lessons.lesson", "pk": 2}, {"fields": {"description": "Understanding and working with strings", "number": 4, "name": "Strings"}, "model": "lessons.lesson", "pk": 3}, {"fields": {"description": "How to pass information around inside a program", "number": 5, "name": "Variables"}, "model": "lessons.lesson", "pk": 4}, {"fields": {"description": "True or False?", "number": 7, "name": "Booleans"}, "model": "lessons.lesson", "pk": 5}, {"fields": {"description": "Grouping information together", "number": 8, "name": "Lists"}, "model": "lessons.lesson", "pk": 6}, {"fields": {"description": "Errors are our friends", "number": 6, "name": "Errors"}, "model": "lessons.lesson", "pk": 7}, {"fields": {"description": null, "number": 9, "name": "Logic"}, "model": "lessons.lesson", "pk": 8}, {"fields": {"description": null, "number": 10, "name": "Loops"}, "model": "lessons.lesson", "pk": 9}, {"fields": {"description": null, "number": 11, "name": "Functions"}, "model": "lessons.lesson", "pk": 10}, {"fields": {"description": null, "number": 12, "name": "Input"}, "model": "lessons.lesson", "pk": 11}, {"fields": {"description": "", "number": 13, "name": "Modules"}, "model": "lessons.lesson", "pk": 13}, {"fields": {"description": "", "number": 14, "name": "Games"}, "model": "lessons.lesson", "pk": 14}, {"fields": {"description": "", "number": 15, "name": "Minecraft"}, "model": "lessons.lesson", "pk": 15}, {"fields": {"description": "Setting up your learning environment and getting familiar with the Python interpreter", "number": 1, "name": "Getting Started"}, "model": "lessons.lesson", "pk": 16}, {"fields": {"description": "", "number": 16, "name": "Wrapping Up"}, "model": "lessons.lesson", "pk": 17}, {"fields": {"header_title": "What Is Programming?", "description": "<p>But before we start learning about the Python programming language, let's talk a little about what programming is.</p>\r\n\r\n<p>So what do we mean when we talk about programming?</p>\r\n\r\n<ul>\r\n<h3>A <b>problem</b> to solve</h3>\r\n<p>Every program begins with a problem you want to solve. That problem could be as simple as needing to do some math homework, or as complex as giving people around the world a way to talk to one another.</p>\r\n\r\n<h3>A <b>solution</b> to the problem</h3>\r\n<p>The solution to that problem is referred to as an algorithm (and we'll talk about that more in a few minutes).</p>\r\n\r\n<h3>The solution translated into a computer <b>language</b></h3>\r\n<p>And finally, that solution is translated into a programming language, like Python, that the computer can understand.</p>\r\n</ul>\r\n\r\n<p>That package of code that's run on a computer is called a <b>program</b>.</p>", "step_number": 2, "image": "", "screencast": "", "step_name": "What Is Programming?", "lesson": 1, "audiocast": ""}, "model": "lessons.step", "pk": 3}, {"fields": {"header_title": "", "description": "<p>So what about computers? You probably already have a good idea of what they are and what they can do.</p>\r\n\r\n<p>A computer is a kind of machine, and what it does can be described in two simple steps:</p>\r\n\r\n<ul>\r\n<h3>A <b>computer</b> is a machine that <b>stores</b> pieces of information (which we call data).</h3>\r\n<h3>A computer also <b>moves</b>, <b>arranges</b>, and <b>controls</b> that information.</h3>\r\n</ul>\r\n\r\n<p>And it does things with that data, using programs. A <b>program</b> is a detailed set of <b>instructions</b> that tells a computer what to do with that data.</p>\r\n\r\n<p>Computers come in a lot of different forms. You might have a laptop, or a PC. But did you know that your phone might also be a computer? Or maybe you have a game console - that's a computer too.</p>", "step_number": 3, "image": "", "screencast": "", "step_name": "What Is A Computer?", "lesson": 1, "audiocast": ""}, "model": "lessons.step", "pk": 4}, {"fields": {"header_title": "", "description": "<p>But there's something you should know about computers.</p>\r\n\r\n<p>They're not very smart.</p>\r\n\r\n<p>On their own, computers don't really know how to do much. They can only do what <i>you</i> tell them to do.</p>\r\n\r\n<p>So you have to write good instructions for them. And that's what we're going to learn how to do here today.</p>\r\n\r\n<p>Here are some examples of instructions you might use for people:</p>\r\n\r\n<p>Suppose you want to make an origami crane - that's the 'problem' you want to solve. Well, here's a step-by-step guide.</p>\r\n\r\n<p><center><img src=\"/static/lessons/images/YoungCoders_2_5_origami.jpg\"></center></p>\r\n\r\n<p>Or maybe you need something to write on? Well, there's a diagram - follow all the steps and you'll have yourself a notebook.</p>\r\n\r\n<p><center><img src=\"/static/lessons/images/YoungCoders_2_5_binder.jpg\"></center></p>\r\n\r\n<p>And what if you're hungry after all that paper folding? Here's a recipe - just some instructions for making cookies.</p>\r\n\r\n<p><center><img src=\"/static/lessons/images/YoungCoders_2_5_recipe.jpg\"></center></p>\r\n\r\n<br><br>", "step_number": 4, "image": "", "screencast": "", "step_name": "Instructions", "lesson": 1, "audiocast": ""}, "model": "lessons.step", "pk": 5}, {"fields": {"header_title": "Algorithms", "description": "<p>All of those instructions we saw on the last page are similar to what we call <b>algorithms</b>.</p>\r\n\r\n<p>The word 'algorithm' is just a fancy name for the instructions we give to computers.</p>\r\n\r\n<p>They're a lot like recipes, with specific steps to follow.</p>\r\n\r\n<p>There are some differences though - algorithms usually have a lot more steps than cookie recipes.</p>\r\n\r\n<p>And algorithms are written using special languages - programming languages, like Python.</p>", "step_number": 5, "image": "", "screencast": "", "step_name": "Algorithms", "lesson": 1, "audiocast": ""}, "model": "lessons.step", "pk": 6}, {"fields": {"header_title": "97 Simple Steps", "description": "<p>First, let's try creating a set of instructions of our own.</p>\r\n\r\n<div style=\"font-weight: bold; font-size: 30px; text-align: center;\">\r\n<p>Is making PB&J difficult?</p>\r\n<p>How many steps does it feel like?</p>\r\n</div>\r\n\r\n<p>Have you ever made a peanut butter and jelly sandwich before? How many steps do you think it takes?</p>\r\n\r\n<p>Let's try it out.</p>\r\n\r\n<p>[insert demo video here]</p>\r\n\r\n<center>\r\n<video width=\"480\" height=\"320\" controls=\"controls\">\r\n<source src=\"/static/lessons/videos/pbj_628.mp4\" type=\"video/mp4\">\r\n</video>\r\n</center>\r\n\r\n<br>\r\n\r\n<!-- \r\nmore online resources:\r\nhttp://www.centexeweek.org/activities/peanut-butter-and-jelly\r\nhttp://www.math.grin.edu/~rebelsky/Courses/CS105/2000S/Questions/question.07.html\r\nhttp://www.trainingontheedge.com/how-to-make-a-peanut-butter-and-jelly-sandwich.html\r\nhttp://codesnipers.com/?q=how-to-make-a-peanut-butter-and-jelly-sandwich\r\nhttp://www.bu.edu/gk12/tyler/lessons/PBJ/PBJ.htm\r\nhttp://www.learnnc.org/lp/pages/3219\r\n-->\r\n", "step_number": 6, "image": "", "screencast": "", "step_name": "97 Simple Steps To A PB&J", "lesson": 1, "audiocast": ""}, "model": "lessons.step", "pk": 7}, {"fields": {"header_title": "Raspberry Pi", "description": "<p>We really recommend using a Raspberry Pi for this tutorial! It's a great platform for beginners. It's inexpensive, simple to assemble, and best of all you won't need to worry about installing anything, since all the tools you'll need - including Python itself - are already there.</p>\r\n\r\n<p>If you're using a Raspberry Pi for the lessons on this site and you're starting from scratch, here's what you'll need to set it up.</p>\r\n\r\n<p>A <a href=\"https://www.raspberrypi.org/\" target=\"new\">Raspberry Pi</a> is a credit-card sized computer, simple enough to assemble in just a few minutes and powerful enough to run many applications.</p>\r\n\r\n<img src=\"/static/lessons/images/RPi.jpg\" height=\"225px\">\r\n\r\n<p>Along with the Raspberry Pi itself, you'll need a few other small pieces of equipment. These days, it's easy to get most of the things you need in a kit, such as <a href=\"https://www.amazon.com/CanaKit-Raspberry-Complete-Starter-Kit/dp/B01C6Q2GSY/\" target=\"new\">this one</a>. For more options, go onto Amazon or your favorite electronics web site and search for 'raspberry pi starter kit'.</p>\r\n\r\n<h3>Equipment you should have:</h3>\r\n<ul>\r\n  <li>Raspberry Pi</li>\r\n  <li><a href=\"https://www.raspberrypi.org/blog/raspberry-pi-official-case/\" target=\"new\">Protective case</a> (optional but recommended)</li>\r\n  <li><a href=\"https://www.amazon.com/CanaKit-Raspberry-Supply-Adapter-Charger/dp/B00MARDJZ4/\" target=\"new\">Micro USB power supply</a></li>\r\n  <li>A compatible <a href=\"https://www.raspberrypi.org/documentation/installation/sd-cards.md\" target=\"new\">SD card</a>, with <a href=\"https://www.raspberrypi.org/downloads/noobs/\" target=\"new\">NOOBS</a> installed (Most kits include a card that already has the NOOBS operating system installed - if you buy a card independently, you'll have to download NOOBS and install it yourself.)</li>\r\n  <li>Keyboard and USB connector</li>\r\n  <li>Mouse and USB connector</li>\r\n  <li>Monitor and HDMI cable</li>\r\n</ul>\r\n\r\n<p>Most kits will come with a guidebook for assembling all of the pieces to get your Raspberry Pi desktop up and running. The Raspberry Pi web site also has a <a href=\"https://www.raspberrypi.org/help/quick-start-guide/\" target=\"new\">Quick Start Guide</a> that explains all the parts of the computer and walks you through installation.</p>\r\n\r\n<p>Once the board is in its case, all the peripherals are hooked up, and the power supply is plugged in, turn on the monitor. You should see an installation screen.</p>\r\n\r\n<h2>Installation:</h2>\r\n<ol>\r\n<li>If you're prompted to install several options, only check the box for 'Install Raspian'. Do not select any other options</li>\r\n<li>Click the Install icon</li>\r\n<li>If you get a popup asking if you want to overwrite the existing OS, select YES.</li>\r\n<li>Sit back and wait - this step will take a few minutes.</li>\r\n<li>When the installation step finishes you should see an 'OS Installed' message \u2013 click 'OK' to continue.</li>\r\n<li>When the desktop comes up, here are some localization changes that you might want to make:</li>\r\n  <ul>\r\n    <li>Go to Menu > Preferences > Keyboard & Mouse > Keyboard Layout and select the appropriate Country/Variant. For students in the U.S., that will be Country: United States and Variant: English (US).</li>\r\n    <li>If you want to change your computer's timezone, go to Menu > Preferences > Raspberry Pi Configuration, click on the Timezone button and select the appropriate country and zone name.</li>\r\n  </ul>\r\n</ol>\r\n\r\n<p><b>For more help with setting up your Raspberry Pi:</b></p>\r\n\r\n<p><a href=\"https://www.raspberrypi.org/documentation/setup/\">https://www.raspberrypi.org/documentation/setup/</a></p>\r\n", "step_number": 1, "image": "", "screencast": "", "step_name": "Setting Up Your Raspberry Pi", "lesson": 16, "audiocast": ""}, "model": "lessons.step", "pk": 9}, {"fields": {"header_title": "Math", "description": "<img src=\"/static/lessons/images/mathie.jpg\" height=\"225px\" align=\"right\">\r\n\r\n<p>Now it's time to start writing some instructions for computers!</p>\r\n\r\n<p>The first thing you need to do is open a program called Idle. If you've followed the instructions from Lesson 1, it should be on your desktop or in your Applications folder.</p>\r\n\r\n<p>Let's get started with some very simple math.</p>\r\n\r\n<p>Go ahead and type these expressions one at a time. After each one, hit the Enter key and see what happens.</p>\r\n\r\n<p>\r\n<code>\r\n&raquo; 1 + 2<br>\r\n&raquo; 12 - 3<br>\r\n&raquo; 9 + 5 - 15<br>\r\n</code>\r\n</p>\r\n\r\n<p>We're using some symbols you probably already know - the plus and minus signs. In the programming world, we call these <b>operators</b>.</p>\r\n\r\n<!-- yes, please change this ... -->\r\n<table>\r\n  <tr>\r\n    <td><u>Operators:</u></td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td>add</td>\r\n    <td>+</td>\r\n  </tr>\r\n  <tr>\r\n    <td>subtract</td>\r\n    <td>-</td>\r\n  </tr>\r\n</table>\r\n\r\n<br>\r\n\r\n<p>By the way, you have just started writing Python.</p>\r\n", "step_number": 1, "image": "", "screencast": "", "step_name": "Math Basics", "lesson": 2, "audiocast": ""}, "model": "lessons.step", "pk": 10}, {"fields": {"header_title": "Math", "description": "<p>Here are some more symbols, or operators.</p>\r\n\r\n<p>For division, we use that slanted line, called a forward slash.</p>\r\n\r\n<p>And for multiplication, we use a star symbol, called an asterisk.</p>\r\n\r\n<table>\r\n  <tr>\r\n    <td><u>Operators:</u></td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td>divide</td>\r\n    <td>/</td>\r\n  </tr>\r\n  <tr>\r\n    <td>multiply</td>\r\n    <td>*</td>\r\n  </tr>\r\n</table>\r\n\r\n\r\n<p>Let's try a few of these expressions and see what happens.</p>\r\n\r\n<p>\r\n<code>\r\n&raquo; 6 * 5<br>\r\n&raquo; 6 / 2<br>\r\n&raquo; 10 * 5 * 3<br>\r\n</code>\r\n</p>\r\n\r\n<p>When you finish typing these examples, feel free to try some of your own using different numbers and operators.</p>", "step_number": 2, "image": "", "screencast": "", "step_name": "More Operators", "lesson": 2, "audiocast": ""}, "model": "lessons.step", "pk": 11}, {"fields": {"header_title": "Math", "description": "<p>Let's try some more division:</p>\r\n\r\n<p>\r\n<code>\r\n&raquo; 8 / 4<br>\r\n&raquo; 20 / 7<br>\r\n&raquo; 10 / 3<br>\r\n</code>\r\n</p>\r\n\r\n<p>Are you getting the results you expect?</p>\r\n\r\n<p>Are your answers all coming back as decimal numbers?</p>\r\n", "step_number": 3, "image": "", "screencast": "", "step_name": "More Division", "lesson": 2, "audiocast": ""}, "model": "lessons.step", "pk": 12}, {"fields": {"header_title": "Math", "description": "<p>Here we're learning something new about how Python works with numbers.</p>\r\n\r\n<p>In Python, and in many other programming languages, a decimal number is called a <b>float</b>.</p>\r\n\r\n<p>Here are some examples of decimal numbers, or floats:</p>\r\n\r\n<ul>\r\n<li>10.0</li>\r\n<li>17.31</li>\r\n<li>2.5346</li>\r\n</ul>\r\n\r\n<p>When we type a math expression using division, Python gives a float back to us as a response - the answer will always be some sort of decimal number. Python uses floats by default because it wants to give us the most accurate answer possible.</p>\r\n\r\n<p>\r\n<code>\r\n&raquo; 10/3<br>\r\n3.3333333333333335<br>\r\n&raquo; 10/2<br>\r\n5.0<br>\r\n</code>\r\n</p>\r\n\r\n<p>And below you can see some examples of integers - or whole numbers:</p>\r\n\r\n<ul>\r\n<li>9</li>\r\n<li>-55</li>\r\n<li>346</li>\r\n</ul>\r\n\r\n<p>If we want Python to give us an integer instead of a float, we have to use this built-in Python function, called round(). Type the word <code>round</code>, then inside parentheses type one of the division expressions and hit the Enter key.</p>\r\n\r\n<p>\r\n<code>\r\n&raquo; round(10/3)<br>\r\n3<br>\r\n&raquo; round(10/2)<br>\r\n5<br>\r\n</code>\r\n</p>\r\n\r\n<p>Go ahead and try a few more expressions using different numbers. You might notice some new things.</p>\r\n\r\n<p>The rule we've learned here is that if you want Python answers with floats - if you want to get integers, you have to use the built-in function <code>round()</code>.</p>\r\n\r\n<p>Before we move on to the next thing, let's take a minute to talk about some new words you'll hear more of soon.</p>\r\n\r\n<p>When we say that Python <b>returns</b> something, we're talking about the answers that Python gives us. When you type something at the prompt and hit Enter, you're asking Python a question. Then Python gives back, or returns, an answer to you.</p>\r\n\r\n<p>We've also been using this word <b>expression</b> - you'll hear that a lot more as we go on. So far the expressions we've seen have been math problems. But expressions can be a lot more - we're also going to see some expressions that use words and other kinds of symbols.</p>", "step_number": 4, "image": "", "screencast": "", "step_name": "Floats", "lesson": 2, "audiocast": ""}, "model": "lessons.step", "pk": 13}, {"fields": {"header_title": "Math", "description": "<p>In Python, we can do a lot of things with numbers besides just adding or dividing.</p>\r\n\r\n<p>What if we need to find out if one number is larger than another? Or if one number is equal to another? Suppose you're making a video game with Python - you might want to do something like this to compare scores between two players, for example.</p>\r\n\r\n<p>Well, here are some more symbols (or operators) that we can use. These are called <b>comparison</b> operators.</p>\r\n\r\n<table>\r\n <tr>\r\n   <td style=\"width: 200px;\"> == </td>\r\n   <td style=\"width: 400px;\">Equal to</td>\r\n  </tr>\r\n  <tr>\r\n    <td>!=</td>\r\n    <td>Not equal to</td>\r\n  </tr>\r\n  <tr>\r\n    <td> < </td>\r\n    <td>Less than</td>\r\n  </tr>\r\n  <tr>\r\n    <td> > </td>\r\n    <td>Greater than</td>\r\n  </tr>\r\n  <tr>\r\n    <td> <= </td>\r\n    <td>Less than or equal to</td>\r\n  </tr>\r\n  <tr>\r\n    <td> >= </td>\r\n    <td>Greater than or equal to</td>\r\n  </tr>\r\n</table>\r\n\r\n<br>\r\n\r\n<p>Later on, you'll see some examples of how these can be used in programming. But for now, let's look at how these comparisons work.</p>\r\n", "step_number": 5, "image": "", "screencast": "", "step_name": "Comparison Operators", "lesson": 2, "audiocast": ""}, "model": "lessons.step", "pk": 14}, {"fields": {"header_title": "Math: Practice", "description": "<p>Let's practice with a few examples so you can see what kinds of answers you get.</p>\r\n\r\n<p>Type each of these expressions at the prompt and hit the Enter key after each one.</p>\r\n\r\n<p>Go back to the previous page if you need some help to remember what each of the comparison operators mean.</p>\r\n\r\n<p>\r\n<code>\r\n&raquo; 5 < 4 + 3<br>\r\n&raquo; 12 + 1 >= 12<br>\r\n&raquo; 16 * 2 == 32<br>\r\n&raquo; 16 != 16<br>\r\n&raquo; 5 >= 6<br>\r\n</code>\r\n</p>\r\n\r\n<p>Take your time, and try a few other expressions if you feel like it.</p>\r\n\r\n<p>What happens if you use floats? Does it make a difference?</p>", "step_number": 6, "image": "", "screencast": "", "step_name": "Practice", "lesson": 2, "audiocast": ""}, "model": "lessons.step", "pk": 15}, {"fields": {"header_title": "Math: Practice", "description": "<p>Here are the answers to the comparisons on the last page:</p>\r\n\r\n<p>\r\n<code>\r\n&raquo; 5 < 4 + 3<br>True<br>\r\n&raquo; 12 + 1 >= 12<br>True<br>\r\n&raquo; 16 * 2 == 32<br>True<br>\r\n&raquo; 16 != 16<br>False<br>\r\n&raquo; 5 >= 6<br>False<br>\r\n</code>\r\n</p>\r\n\r\n<p>The first thing you probably noticed is that the answers you got back aren't numbers.</p>\r\n\r\n<p>Well that makes sense, right? If we're asking if one number is greater than another, the answer is going to be either True or False, something we call a Boolean. We'll talk about Booleans in more detail a little later on.</p>\r\n\r\n<p>One other thing we should talk about here is something called the <i>order of operations</i>.</p>\r\n\r\n<p>Let's look at the first expression: <code>5 < 4 + 3</code></p>\r\n\r\n<p>When the computer reads that expression, do you think it sees this?:</p>\r\n\r\n<p>\"Is five less than four? Then add 3.\"</p>\r\n\r\n<p>Hopefully not, because the answer to \"Is five less than four?\" is False, and you can't add 3 to that.</p>\r\n\r\n<p>Instead, Python does the adding first. 4 + 3. And 4 + 3 is 7, so what this expression is really asking is:</p>\r\n\r\n<p>\"Is five less than seven?\"</p>\r\n\r\n<p>So here's another rule about doing math with Python:</p>\r\n\r\n<p>Simple expressions like adding or multiplying will always be calculated before any the comparisons.</p>", "step_number": 7, "image": "", "screencast": "", "step_name": "Practice: Answers", "lesson": 2, "audiocast": ""}, "model": "lessons.step", "pk": 16}, {"fields": {"header_title": "Strings", "description": "<p>We\u2019ve just covered the basics of using math in Python, so now it\u2019s time to talk about a new kind of data, called <b>strings</b>.</p>\r\n\r\n<p>When we use the word <i>string</i> in programming, we're talking about characters, like letters or symbols, or a bunch of characters put together, like words.</p>\r\n\r\n<p>But maybe the best way to explain what a string is would be to show some examples.</p>", "step_number": 1, "image": "", "screencast": "", "step_name": "Strings", "lesson": 3, "audiocast": ""}, "model": "lessons.step", "pk": 17}, {"fields": {"header_title": "Strings", "description": "<p>Try typing these two examples exactly as they're written, with quotes around them, and see what you get:</p>\r\n\r\n<p>\r\n<code>\r\n&raquo; \"puppy dog\"<br>\r\n&raquo; \"Hello!\"<br>\r\n</code>\r\n</p>\r\n\r\n<p>Now try typing this example without quotes and hit Enter:</p>\r\n\r\n<p>\r\n&raquo; apple<br>\r\n</p>\r\n\r\n<p>What\u2019s the result? Did you get an error message?</p>\r\n\r\n<p>We'll talk about these error messages a little later on, but for now we've learned a new rule about Python and strings:</p>\r\n\r\n<p><b>Rule: If you want Python to read a string, it must be inside quotes.</b></p>\r\n\r\n<p>Try some of these other examples:</p>\r\n\r\n<p>\r\n&raquo; \"apple\"<br>\r\n&raquo; \"What's for dinner?\"<br>\r\n&raquo; \"3 + 5\"<br>\r\n</p>\r\n\r\n<p>It looks like numbers, or math expressions, can also be strings - as long as they're inside quotes!</p>\r\n\r\n<p>There's one other thing you might have noticed. See that second-to-last example, the one asking \"What's for dinner?\" ?</p>\r\n\r\n<p>That string has a single quote, or an apostrophe, inside it. And that's fine, because the quotes on the outside are double quotes.</p>\r\n\r\n<p>But you can also wrap a string in single quotes - Python treats both of these expressions the same way:</p>\r\n\r\n<p>\r\n&raquo; 'banana'<br>\r\n&raquo; \"banana\"<br>\r\n</p>\r\n\r\n<p>Suppose you have a string with an apostrophe in it. If you want to put that inside single quotes, you can <i>escape</i> the apostrophe - that is, tell Python that you meant for it to be part of the string:</p>\r\n\r\n<p>\r\n&raquo; 'What\\'s for dinner?'<br>\r\n</p>\r\n\r\n<p>Otherwise, Python thinks that apostrophe is supposed to be the end of the string:</p>\r\n\r\n<p>\r\n&raquo; 'What's for dinner?'<br>\r\n  File \"<stdin>\", line 1<br>\r\n    'What's for dinner?'<br>\r\n          ^<br>\r\nSyntaxError: invalid syntax<br>\r\n</p>", "step_number": 2, "image": "", "screencast": "", "step_name": "Examples", "lesson": 3, "audiocast": ""}, "model": "lessons.step", "pk": 18}, {"fields": {"header_title": "Strings", "description": "<p>Remember those operators we used for doing math? Well, we can also use some of them to do things with strings.</p>\r\n\r\n<table>\r\n  <tr>\r\n    <td><u>Operators:</u></td>\r\n    <td>&nbsp;</td>\r\n  </tr>\r\n  <tr>\r\n    <td>add</td>\r\n    <td>+</td>\r\n  </tr>\r\n  <tr>\r\n    <td>subtract</td>\r\n    <td>-</td>\r\n  </tr>\r\n</table>\r\n<br>\r\n\r\n<p>Here's a new word: <b>concatenate</b>. Concatenation is a little bit like adding - we use it to put strings together side by side.</p>\r\n\r\n<p>And multiplying controls how many times we show a string.</p>\r\n\r\n<p>Try typing these examples and see what Python gives you.</p>\r\n\r\n<p>Try multiplying:</p>\r\n\r\n<p>\r\n&raquo; \"HAHA\" * 250<br>\r\n</p>\r\n\r\n<p>Try concatenating:</p>\r\n\r\n<p>\r\n&raquo; \"Hi\" + \"there!\"<br>\r\n</p>", "step_number": 3, "image": "", "screencast": "", "step_name": "Operators", "lesson": 3, "audiocast": ""}, "model": "lessons.step", "pk": 19}, {"fields": {"header_title": "Strings: Indexes", "description": "<p>We talked earlier about how strings can be made up of characters, like letters or numbers, or even punctuation marks.</p>\r\n\r\n<p>Each of those characters has a position in the string, and that position is called an <b>index</b>.</p>\r\n\r\n<p>Let's look at the example we have here. This concatenated string is the word \"Hello\", and it's made up of five characters - five letters.</p>\r\n\r\n<p>\r\n&raquo; \"H\" + \"e\" + \"l\" + \"l\" + \"o\"<br>\r\n\"Hello\"<br>\r\n</p>\r\n\r\n<p>We could start counting to identify the position of each letter. But here's something interesting to know about Python - instead of counting from one, we're going to start counting from zero.</p>\r\n\r\n<p>\r\nH e l l o<br>\r\n0 1 2 3 4<br>\r\n</p>\r\n\r\n<p>So in our example, the letter 'H' has an index of zero, the letter 'e' has an index of one, and so on.</p>\r\n", "step_number": 4, "image": "", "screencast": "", "step_name": "Indexes", "lesson": 3, "audiocast": ""}, "model": "lessons.step", "pk": 20}, {"fields": {"header_title": "Strings: Indexes", "description": "<p>It's pretty easy to figure out indexes when we can count by hand. Now let's try doing it programmatically (that is, using Python).</p>\r\n\r\n<p>Try the first example. At your prompt, type the word <code>print</code>, then inside parentheses, the word \"Hello\" in quotes, and finally these <i><a href=\"https://www.englishclub.com/writing/punctuation-square-brackets.htm\" target=\"new\">square brackets</a></i> with the number zero inside. Then hit Enter.</p>\r\n\r\n<p>\r\n&raquo; print(\"Hello\"[0])<br>\r\nH<br>\r\n</p>\r\n\r\n<p>Since we're asking for the character in this string with an index of zero, Python returns the letter 'H'.</p>\r\n\r\n<p>Now let's try the second example, asking Python for the character with an index of 4.</p>\r\n\r\n<p>\r\n&raquo; print(\"Hello\"[4])\r\n</p>\r\n\r\n<p>Did you get the letter 'o'? Let's see why.</p>\r\n\r\n<p>\r\nH e l l o<br>\r\n0 1 2 3 4<br>\r\n</p>\r\n\r\n<p>If we start at the beginning of the string, the letter 'H' is at index, or position, zero. Then index 1 is the letter 'e', indexes 2 and 3 are 'l'. And index 4 is the letter 'o'.</p>\r\n\r\n<p>Okay, let's try a longer example:</p>\r\n\r\n<p>\r\n&raquo; print(\"Hey, Bob!\"[4])\r\n</p>\r\n\r\n<p>Did Python return anything? Are you sure? Count by hand and see what character is at index 4.</p>\r\n\r\n<p>Remember to start with zero - that's the letter 'H'. Index 1 is the letter 'e', 2 is the letter 'y', 3 is the comma, and 4 is the space. Could that be what Python returned?</p>\r\n\r\n<p>Okay, one last example. We already know that we can enter an index number inside the square brackets to find its matching character in the string.</p>\r\n\r\n<p>But we can also do math inside those square brackets.</p>\r\n\r\n<p>\r\n&raquo; print(\"Hey, Bob!\"[6-1])\r\n</p>\r\n\r\n<p>Here we're subtracting 1 from 6. That comes out to 5. What is the character at index 5 in this string?</p>\r\n", "step_number": 5, "image": "", "screencast": "", "step_name": "Indexes: Examples", "lesson": 3, "audiocast": ""}, "model": "lessons.step", "pk": 21}, {"fields": {"header_title": "Strings: Indexes", "description": "<p>Here are the rules to remember about indexes of strings.</p>\r\n\r\n<ul>\r\n  <li>Each character in a string has a position, and that position is called its <b>index</b>.</li>\r\n  <li>In Python - and in many other programming languages - we start counting indexes at zero (instead of one).</li>\r\n  <li>All the characters in a string are counted - even spaces.</p>\r\n</ul>", "step_number": 6, "image": "", "screencast": "", "step_name": "Rules", "lesson": 3, "audiocast": ""}, "model": "lessons.step", "pk": 22}, {"fields": {"header_title": "Variables", "description": "<p>Now let's look at another way of working with data in Python - something called a <b>variable</b>.</p>\r\n\r\n<p>Suppose you use a math expression to calculate a value. We've done this already. It's pretty simple, right?</p>\r\n\r\n<p>Let's try this example. Type 6 times 6 and hit Enter.</p>\r\n\r\n<p>\r\n&raquo; 6 * 6<br>\r\n144<br>\r\n</p>\r\n\r\n<p>The value you get back should be 36.</p>\r\n\r\n<p>But what if you want to use that value again?</p>\r\n\r\n<p>You could type 6 times 6 again, but if you were writing a program you might have to type that a lot.</p>\r\n\r\n<p>Luckily Python gives us an easier way to do it. You can give your value a name, then you can use that name over and over again.</p>\r\n\r\n<p>Take a look at our next example. Here we're using the name 'puppies' then saying that puppies is equal to 6 times 6.</p>\r\n\r\n<p>Go ahead and type the second example exactly as it's written here and hit Enter:</p>\r\n\r\n<p>\r\n&raquo; puppies = 6 * 6<br>\r\n</p>\r\n\r\n<p>We're <i>assigning</i> the value of 6 times 6 to the variable <code>puppies</code>. </p>\r\n\r\n<p>You shouldn't get any answer back - we haven't asked for one yet. But type the word puppies again and hit Enter. Do you see your value this time?</p>\r\n\r\n<p>\r\n&raquo; puppies<br>\r\n36<br>\r\n</p>\r\n\r\n<p>Go ahead and type and enter the word puppies a few times. You should always get the same answer back.</p>\r\n\r\n<p>Notice that in our example the word puppies does not have any quotes around it.</p>\r\n\r\n<p>If it had quotes around it, Python would treat it like a string.</p>\r\n\r\n<p>Without quotes, Python knows that it's a variable.</p>", "step_number": 1, "image": "", "screencast": "", "step_name": "Save A Value", "lesson": 4, "audiocast": ""}, "model": "lessons.step", "pk": 24}, {"fields": {"header_title": "Variables", "description": "<p>And once you make a variable, you can give it a new value.</p>\r\n\r\n<p>Try typing this example. You're making a variable with the name <code>color</code>, then giving it the string \"yellow\" as a value:</p>\r\n\r\n<p>\r\n&raquo; color = \"yellow\"<br>\r\n&raquo; color<br>\r\n'yellow'<br>\r\n</p>\r\n\r\n<p>Now type the word <code>color</code> and press Enter. Python should return the value of your variable, \"yellow\".</p>\r\n\r\n<p>Now let's give <code>color</code> a new value. Go ahead and type this second example as it's written - remember that the variable doesn't have quotes around it, but the new value, \"red\", does have quotes because it's a string:</p>\r\n\r\n<p>\r\n&raquo; color = \"red\"<br>\r\n&raquo; color<br>\r\n'red'<br>\r\n</p>\r\n\r\n<p>When you enter the variable name again, you should see the new value.</p>\r\n\r\n<p>Go ahead and try giving your variable some other new values, like different strings or even some numbers.</p>\r\n\r\n<p>\r\n&raquo; color = \"fish\"<br>\r\n&raquo; color = 12<br>\r\n</p>\r\n", "step_number": 2, "image": "", "screencast": "", "step_name": "Assign A New Value", "lesson": 4, "audiocast": ""}, "model": "lessons.step", "pk": 25}, {"fields": {"header_title": "Variables", "description": "<p>Here are some of the rules to remember about variables:</p>\r\n\r\n<ul>\r\n  <li>Calculate once, keep the result to use later</li>\r\n</ul>\r\n\r\n<p>The first thing is that you can use them to store values. You only have to do the calculation once, but you can keep the result around to use later.</p>\r\n\r\n<ul>\r\n  <li>Keep the same name, change the value</li>\r\n</ul>\r\n\r\n<p>The second thing is that you can keep the same name for your variable, but give it different values.</p>", "step_number": 3, "image": "", "screencast": "", "step_name": "Rules", "lesson": 4, "audiocast": ""}, "model": "lessons.step", "pk": 26}, {"fields": {"header_title": "Variables", "description": "<p>We can also use variables to do some of the same things we do with numbers and strings.</p>\r\n\r\n<p>Let's create a couple of variables and give them numeric values. We can use our puppies example from earlier, and also create one new variable. Give that new variable a value of three.</p>\r\n\r\n<p>\r\n&raquo; puppies = 12 * 12<br>\r\n&raquo; fishes = 3<br>\r\n</p>\r\n\r\n<p>Now what happens if we add the two variables? Is the answer what you expect?</p>\r\n\r\n<p>\r\n&raquo; fishes + puppies<br>\r\n</p>\r\n\r\n<p>Go ahead and try some other math operations with these two variables. You can subtract, divide, multiply, even compare them.</p>\r\n", "step_number": 4, "image": "", "screencast": "", "step_name": "Math Operations", "lesson": 4, "audiocast": ""}, "model": "lessons.step", "pk": 27}, {"fields": {"header_title": "Variables", "description": "<p>Let's look at just a couple more things you can do with variables.</p>\r\n\r\n<p>Remember when we were learning about strings, and we talked about indexes? An <i>index</i> is the position of a character in a string. Well, if a variable has a value that's a string, we can get an index from it as well.</p>\r\n\r\n<p>Let's go ahead and try this first example. Create a variable named <code>fruit</code>:</p>\r\n\r\n<p>\r\n&raquo; fruit = \"watermelon\"<br>\r\n</p>\r\n\r\nThis variable has the value \"watermelon\", which is a string. Let's find the letter at the index of 2 for that string.</p>\r\n\r\n<p>\r\n&raquo; fruit[2]<br>\r\n</p>\r\n\r\n<p>When you hit Enter, did you get the character you were expecting?</p>\r\n\r\n<p>Here's one more easy example. We've already seen a few ways we can use variables to do math. Well here's one more way - we can use a variable inside those square brackets to calculate an index number.</p>\r\n\r\n<p>Go ahead and type this example - create a variable <code>mynumber</code>, then use it to get an index from the <code>fruit</code> variable:</p>\r\n\r\n<p>\r\n&raquo; mynumber = 3<br>\r\n&raquo; fruit[mynumber-2]<br>\r\n</p>\r\n", "step_number": 6, "image": "", "screencast": "", "step_name": "Indexes", "lesson": 4, "audiocast": ""}, "model": "lessons.step", "pk": 28}, {"fields": {"header_title": "Variables", "description": "<p>Here's one last thing to talk about before we move on - and this doesn't just apply to variables, but to strings and numbers as well.</p>\r\n\r\n<p>When we create a variable and give it a value, we use a single equals sign <code>=</code> to assign that value.</p>\r\n\r\n<p>\r\n&raquo; fruit = \"watermelon\"<br>\r\n&raquo; 5 = 6<br>\r\n</p>\r\n\r\n<p>But remember earlier when we were working with numbers and we used the double equals sign <code>==</code> to do comparisons?</p>\r\n\r\n<p>\r\n&raquo; fruit == \"watermelon\"<br>\r\n&raquo; 5 == 6<br>\r\n</p>\r\n\r\n<p>One equal sign or two? How can you remember which one to use?</p>\r\n\r\n<p>Here's an easy way to remember the difference, using something called a <a href=\"https://en.wikipedia.org/wiki/Mnemonic\">mnemonic</a>:</p>\r\n\r\n<p>When we're assigning a value, we're saying \"this equals that\". That's a short sentence, so it only gets one equal sign: <code>=</code></p>\r\n\r\n<p>But when we're comparing values, we're asking \"is this thing equal to that thing?\". And that's a longer sentence, so it gets two equal signs: <code>==</code></p>", "step_number": 7, "image": "", "screencast": "", "step_name": "Assignments Or Comparisons?", "lesson": 4, "audiocast": ""}, "model": "lessons.step", "pk": 29}, {"fields": {"header_title": "Types Of Data", "description": "<p>We've learned about three types of data so far:</p>\r\n\r\n<table>\r\n  <tr>\r\n    <td style=\"width: 200px;\">27</td>\r\n    <td style=\"width: 400px;\">integers (whole numbers)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>15.238</td>\r\n    <td>floats (decimal points)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>\"Hi!\"</td>\r\n    <td>strings (characters)</td>\r\n  </tr>\r\n</table>\r\n<br>\r\n\r\n<p>Python can tell us about types using a <b>function</b> called <code>type()</code>.</p>\r\n\r\n<p>Let's stop for a minute here and talk about this new word, <b>function</b>. In programming, a function is a command that performs a specific task.</p>\r\n\r\n<p>Later on, we'll take what we've learned about Python and write some of our own functions. But for now, you need to know that Python has a lot of functions that are built in - that is, they are already included, so you don't have to do anything special to use them.</p>\r\n\r\n<p>We've already used a few of Python's functions - we've seen <code>print()</code>, and we used <code>round()</code> when we talked about math.</p>\r\n\r\n<p>To call the type() function, simply type the word 'type', then any kind of data inside the parentheses.</p>\r\n\r\n<p>In this example, we're using our string, \"Hi!\" It should look just like this:</p>\r\n\r\n<p>\r\n&raquo; type(\"Hi!\")<br>\r\n</p>\r\n\r\n<p>And when you hit Enter, you should see this:</p>\r\n\r\n<p>\r\n&lt;type 'str'&gt;\r\n</p>\r\n\r\n<p>We <i>called</i> the function <code>type()</code> and what Python <i>returned</i> to us was a message that tells us our type was <code>str</code>, which is short for 'string'.</p>\r\n\r\n<p>What happens when you ask for the type of an integer or a float? Let's try those out.</p>\r\n\r\n<p>\r\n&raquo; type(27)<br>\r\n</p>\r\n\r\n<p></p>\r\n\r\n<p>\r\n&raquo; type(15.238)<br>\r\n</p>\r\n\r\n<p>Did you get &lt;type 'int'&gt; and &lt;type 'float'&gt;?</p>\r\n", "step_number": 1, "image": "", "screencast": "", "step_name": "Types Of Data", "lesson": 5, "audiocast": ""}, "model": "lessons.step", "pk": 30}, {"fields": {"header_title": "Booleans", "description": "<p>Now let's talk about another new type that you'll see a lot in Python. This type has kind of a strange name - it's called a <a href=\"http://www.merriam-webster.com/audio.php?file=boolea01&word=Boolean&text=\" target=\"new\"><b>Boolean</b></a>.</p>\r\n\r\n<p>A boolean only has two possible values - it can be either True or False.</p>\r\n\r\n<p>Booleans are a pretty simple idea, but they\u2019re very important - we use them in programming a lot when we need to make decisions about what to do in our code:</p>\r\n\r\n<p>\"If this expression is True, do something; if the expression is False, do something else instead.\"</p>\r\n\r\n<p>Let's try typing a few examples. Notice that we\u2019re also using some of our comparison operators here - 'equal to' and 'less than'.</p>\r\n\r\n<p>Is 1 equal to 1? Let's ask Python:</p>\r\n\r\n<p>\r\n&raquo; 1 == 1<br>\r\n  True<br>\r\n</p>\r\n\r\n<p>Is 15 less than 5?</p>\r\n\r\n<p>\r\n&raquo; 15 < 5<br>\r\n  False<br>\r\n</p>\r\n\r\n", "step_number": 2, "image": "", "screencast": "", "step_name": "What Is A Boolean?", "lesson": 5, "audiocast": ""}, "model": "lessons.step", "pk": 33}, {"fields": {"header_title": "Booleans", "description": "<p>What happens when we type Boolean values in the interpreter?</p>\r\n\r\n<p>\r\n&raquo; True<br>\r\n  True<br>\r\n&raquo; False<br>\r\n  False<br>\r\n</p>\r\n\r\n<p>When the words 'True' and 'False' begin with upper case letters, Python knows that it should treat them like Booleans instead of strings or integers.</p>\r\n\r\n<p>What happens when you type the words <code>true</code> and <code>false</code> in all lower case letters?</p>\r\n\r\n<p>\r\n&raquo; true<br>\r\n&raquo; false<br>\r\n</p>\r\n\r\n<p>Did you get errors? That's because Python thinks these are variables.</p>\r\n\r\n<p>Let's try using Python's <code>type()</code> function to see what's a Boolean and what isn't.</p>\r\n\r\n<p>\r\n&raquo; type(True)<br>\r\n&raquo; type(\"True\")<br>\r\n&raquo; type(true)<br>\r\n</p>", "step_number": 3, "image": "", "screencast": "", "step_name": "Trying Out Booleans", "lesson": 5, "audiocast": ""}, "model": "lessons.step", "pk": 34}, {"fields": {"header_title": "Booleans", "description": "<p>Here\u2019s an interesting way to use some of our comparison operators. Let\u2019s see what happens when we use the word <code>and</code> between two comparisons.</p>\r\n\r\n<p>If both are True:</p>\r\n\r\n<p>\r\n&raquo; 1==1 and 2==2<br>\r\nTrue<br>\r\n</p>\r\n\r\n<p>If only one is True:</p>\r\n\r\n<p>\r\n&raquo; 1==1 and 2==3<br>\r\nFalse<br>\r\n</p>\r\n\r\n<p>If both are False:</p>\r\n\r\n<p>\r\n&raquo; 1==2 and 2==3<br>\r\nFalse<br>\r\n</p>\r\n\r\n<p>If both comparisons are True, then the whole expression will be true.  But what happens if one of the expressions is False?</p>\r\n\r\n<p>Here's a real-life example that might help make some sense of all this:</p>\r\n\r\n<p>Suppose you're going to a grocery store because you want to buy some cheese. You need two things: some way to pay for the cheese, and a bag to put it in so that you can carry it home.</p>\r\n\r\n<p>If you have both money AND a bag, the grocery will let you take your cheese home.</p>\r\n\r\n<p>But what if you have a bag, but no money? Then you can't buy the cheese.</p>\r\n\r\n<p>And what if you don't have money or a bag? Then you definitely can't buy the cheese.</p>", "step_number": 4, "image": "", "screencast": "", "step_name": "AND Comparisons", "lesson": 5, "audiocast": ""}, "model": "lessons.step", "pk": 35}, {"fields": {"header_title": "Booleans", "description": "<p>What happens when we use the word <code>or</code> between comparisons?</p>\r\n\r\n<p>As long as at least one part of the comparison is True, the whole expression is considered True.</p>\r\n\r\n<p>Let's think back to our grocery store example:</p>\r\n\r\n<p>You can pay with cash OR a credit card OR a check - as long as you have at least one of those things, you can buy your cheese.</p>\r\n\r\n<p>If both are True:</p>\r\n\r\n<p>\r\n&raquo; 1==1 or 2==2<br>\r\nTrue<br>\r\n</p>\r\n\r\n<p>If only one is True:</p>\r\n\r\n<p>\r\n&raquo; 1==1 or 2!=2<br>\r\nTrue<br>\r\n</p>\r\n\r\n<p>But if both are False, then the whole thing is False.</p>\r\n\r\n<p>\r\n&raquo; 1==2 or 2==3<br>\r\nFalse<br>\r\n</p>\r\n\r\n", "step_number": 5, "image": "", "screencast": "", "step_name": "OR Comparisons", "lesson": 5, "audiocast": ""}, "model": "lessons.step", "pk": 36}, {"fields": {"header_title": "Booleans", "description": "<p>What do you think happens when we use the word <code>not</code> in front of a comparison? Let's type these examples and find out:</p>\r\n\r\n<p>\r\n&raquo; 1==1<br>\r\nTrue<br>\r\n&raquo; not 1==1<br>\r\nFalse<br>\r\n</p>\r\n\r\n<p>You can use the word <code>not</code> to reverse the answer that Python gives!</p>\r\n\r\n<p>Any expression that is True can become False:</p>\r\n\r\n<p>\r\n&raquo; not True<br>\r\nFalse<br>\r\n</p>\r\n", "step_number": 6, "image": "", "screencast": "", "step_name": "NOT Comparisons", "lesson": 5, "audiocast": ""}, "model": "lessons.step", "pk": 37}, {"fields": {"header_title": "Booleans", "description": "<p>You can use booleans in their own expressions. Let's try some that use <code>and</code>, <code>or</code>, and <code>not</code>:</p>\r\n\r\n<p>\r\n&raquo; True and True<br>\r\n&raquo; True and False<br>\r\n&raquo; False and False<br>\r\n</p>\r\n\r\n<p>\r\n&raquo; True or True<br>\r\n&raquo; False or True<br>\r\n&raquo;  False or False<br>\r\n</p>\r\n\r\n<p>\r\n&raquo; not True and True<br>\r\n&raquo; not True or True<br>\r\n</p>\r\n\r\n<p>When you entered these, did you get the answers you expected?</p>\r\n", "step_number": 7, "image": "", "screencast": "", "step_name": "Expressions", "lesson": 5, "audiocast": ""}, "model": "lessons.step", "pk": 38}, {"fields": {"header_title": "Booleans: Practice", "description": "<p>Try some of these expressions.</p>\r\n\r\n<p>See if you can predict what answers Python will give back.</p>\r\n\r\n<p>\r\n&raquo; True and True<br>\r\n&raquo; False and True<br>\r\n&raquo; 1 == 1 and 2 == 1<br>\r\n&raquo; \"test\" == \"test\"<br>\r\n&raquo; 1 == 1 or 2 != 1<br>\r\n&raquo; True and 1 == 1<br>\r\n&raquo; False and 0 != 0<br>\r\n&raquo; True or 1 == 1<br>\r\n&raquo; \"test\" == \"tests\"<br>\r\n&raquo; 1 != 0 and 2 == 1<br>\r\n</p>\r\n\r\n<p>For more practice with Booleans, take a look at this page: <a href=\"http://bit.ly/boolean-practice\" target=\"new\">http://bit.ly/boolean-practice</a></p>", "step_number": 8, "image": "", "screencast": "", "step_name": "Practice", "lesson": 5, "audiocast": ""}, "model": "lessons.step", "pk": 39}, {"fields": {"header_title": "Lists", "description": "<p>Let's talk about one more new type of data that probably sounds pretty familiar - the <b>list</b>.</p>\r\n\r\n<p>You probably already have a good idea of what a list is. Think about the lists you might use every day - a grocery list, or maybe a list of chores to do?</p>\r\n\r\n<p>Just like all those everyday lists, a list in Python is just a collection of things:</p>\r\n\r\n<p>\r\n&raquo; [\"pizza\", \"fries\", 3, 2.5, \"donuts\"]<br>\r\n</p>\r\n\r\n<p>Python knows this is a list because it's wrapped in what we call square brackets <code>[</code><code>]</code>.</p>\r\n\r\n<p>In the list below, we're creating the variable <code>fruit</code> and giving it a value - a list containing several fruit names as strings.</p>\r\n\r\n<p>\r\n&raquo; fruit = [\"apple\", \"banana\", \"grape\"]<br>\r\n</p>\r\n\r\n<p>This next one contains different types of numbers, assigned to the variable <code>mynumbers</code>:</p>\r\n\r\n<p>\r\n&raquo; mynumbers = [3, 17, -4, 8.8, 1]<br>\r\n</p>\r\n\r\n<p>Guess what these will output:</p>\r\n\r\n<p>\r\n&raquo; type(fruit)<br>\r\n&raquo; type(mynumbers)<br>\r\n</p>\r\n\r\n<p>A list can contain different kinds of objects, such as strings, integers and floats:</p>\r\n\r\n<p>\r\n&raquo; [43, \"book\", 11.5, \"computer\"]<br>\r\n</p>\r\n\r\n<p>A list can also contain as many or as few of those objects as you want. In fact, it can even be empty:</p>\r\n\r\n<p>\r\n&raquo; []<br>\r\n[]<br>\r\n&raquo; type([])<br>\r\n&lt;type 'list'&gt;<br>\r\n</p>\r\n", "step_number": 1, "image": "", "screencast": "", "step_name": "Collection of Objects", "lesson": 6, "audiocast": ""}, "model": "lessons.step", "pk": 41}, {"fields": {"header_title": "Lists", "description": "<p>Just like strings and variables, each item in a list can be described with an <b>index</b>. As we mentioned earlier, an index is that item's position in the list.</p>\r\n\r\n<p>\r\n&raquo; fruit = [\"apple\", \"banana\", \"grape\"]<br>\r\n</p>\r\n\r\n<p>The list <code>fruit</code> has three items in it. So if we were going to describe the position of each item, we might say that \"apple\" is the first item, \"banana\" is the second, and \"grape\" is third.</p>\r\n\r\n<p>But remember: Python always starts counting at zero!</p>\r\n\r\n<div class=\"hello\"><pre>\r\n['apple', 'banana', 'grape']\r\n    0        1         2\r\n</pre></div>\r\n\r\n<p>So in the <code>fruit</code> list, \"apple\" is actually at index 0, \"banana\" is at index 1, and \"grape\" is at index 2. We still have three items in the list, we're just counting them and describing their positions in a way that you might not expect.</p>\r\n\r\n<p>What if we have a list and we want to find out what the first item is?</p>\r\n\r\n<p>\r\n&raquo; fruit[0]<br>\r\n</p>\r\n\r\n<p>Here we typed the variable name of the list, and then right next to it the number of the index we're looking for. The number should be inside square brackets, and there should not be a space between the brackets and the word <code>fruit</code>.</p>\r\n\r\n<p>\r\n&raquo; fruit[0]<br>\r\n'apple'<br>\r\n</p>\r\n\r\n<p>How would we find out what the second item is? What about the item at the index 2? Are they the same thing?</p>\r\n\r\n<p>\r\n&raquo; fruit[1]<br>\r\n'banana'<br>\r\n&raquo; fruit[2]<br>\r\n'grape'<br>\r\n</p>\r\n\r\n<p>What happens if we try to get an item from the list at the index 3?</p>\r\n\r\n<p>\r\n&raquo; fruit[3]<br>\r\n<pre>\r\nTraceback (most recent call last):\r\n&nbsp;&nbsp;&nbsp;&nbsp;File \"<stdin>\", line 1, in <module>\r\nIndexError: list index out of range\r\n</pre>\r\n</p>\r\n\r\n<p>Do you know why we got that error message?</p>\r\n\r\n<p>We have only three items in the list. If Python starts counting at 0, then the only indexes (or <i>indices</i>) we have would be 0, 1, and 2.</p>\r\n\r\n<p>So there is no index 3 in our <code>fruit</code> list. Python lets you know that with an IndexError.</p>", "step_number": 2, "image": "", "screencast": "", "step_name": "List Indexes", "lesson": 6, "audiocast": ""}, "model": "lessons.step", "pk": 43}, {"fields": {"header_title": "Lists: Practice", "description": "<p>Make a list of three of your favorite colors.</p>\r\n\r\n<p><br></p>\r\n\r\n<p>Use an index to print your favorite color\u2019s name.</p>\r\n\r\n<p><br></p>", "step_number": 3, "image": "", "screencast": "", "step_name": "Practice", "lesson": 6, "audiocast": ""}, "model": "lessons.step", "pk": 44}, {"fields": {"header_title": "Lists: Practice", "description": "<p>Make a list of three of your favorite colors.</p>\r\n\r\n<p>\r\n&raquo; colors = [\"blue\", \"pink\", \"purple\"]<br>\r\n</p>\r\n\r\n<p>Use an index to print your favorite color\u2019s name.</p>\r\n\r\n<p>\r\n&raquo; print(colors[0])<br>\r\n</p>\r\n\r\n<p></p>", "step_number": 4, "image": "", "screencast": "", "step_name": "Practice: Answers", "lesson": 6, "audiocast": ""}, "model": "lessons.step", "pk": 45}, {"fields": {"header_title": "Errors", "description": "<p>Now we\u2019re going to talk about something that\u2019s really important in programming - errors and error messages.</p>\r\n\r\n<p>Error messages are our friends - they\u2019re a good thing, because they tell us what went wrong. Without error messages, it\u2019s hard to fix something that\u2019s broken.</p>\r\n\r\n<p>Try entering some of these expressions and see what answers Python gives you.</p>\r\n\r\n<p>The first expression multiplies the string \"friend\" and prints it 5 times.</p>\r\n\r\n<p>\r\n&raquo; \"friend\" * 5<br>\r\n  'friendfriendfriendfriendfriend'<br>\r\n</p>\r\n\r\n<p>What is this next expression supposed to do? Should it combine the word \"friend\" and the number 5? What happens instead?</p>\r\n\r\n<p>\r\n&raquo; \"friend\" + 5<br>\r\n<pre>\r\nTraceback (most recent call last):\r\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\r\nTypeError: Can't convert 'int' object to str implicitly\r\n</pre>\r\n</p>\r\n\r\n<p>What do you think <code>str</code> and <code>int</code> mean here?</p>\r\n\r\n<p>Does the error message tell you what\u2019s wrong?</p>\r\n", "step_number": 1, "image": "", "screencast": "", "step_name": "Examples", "lesson": 7, "audiocast": ""}, "model": "lessons.step", "pk": 47}, {"fields": {"header_title": "Errors", "description": "<p>Now let\u2019s take a look at that error message and see what it\u2019s really telling us.</p>\r\n\r\n<p>\r\n&raquo; \"friend\" + 5<br>\r\n</p>\r\n<pre>\r\nTraceback (most recent call last):\r\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\r\nTypeError: Can't convert 'int' object to str implicitly\r\n</pre>\r\n\r\n<p>The first two lines are pretty common to all error messages, so they won\u2019t really help us much here.  But the last line gives us some valuable information.</p>\r\n\r\n<ul>\r\n<li><code>int</code> is an integer</li>\r\n<li><code>str</code> is a string</li>\r\n<li>Python cannot concatenate objects of different types</li>\r\n</ul>\r\n\r\n<p>We tried to concatenate two pieces of data (which Python calls <i>objects</i>) - the string \"friend\" and the number 5. But Python isn\u2019t able to concatenate those two objects because one is a string and one is an integer. They're two different <i>types</i> of data. And so we get what\u2019s called a \"TypeError\".</p>\r\n\r\n<p>When Python sees an expression like this, it doesn't know if we're trying to add numbers or concatenate strings. And Python is not smart enough to guess what we mean - we have to tell it. So with this error, Python is letting us know that it needs clarification.</p>", "step_number": 2, "image": "", "screencast": "", "step_name": "Parts Of An Error Message", "lesson": 7, "audiocast": ""}, "model": "lessons.step", "pk": 48}, {"fields": {"header_title": "Errors", "description": "<p>How can we fix this error? We know that concatenation won\u2019t work.</p>\r\n\r\n<p>\r\n&raquo; \"friend\" + 5<br>\r\n<pre>\r\nTraceback (most recent call last):\r\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\r\nTypeError: Can't convert 'int' object to str implicitly\r\n</pre>\r\n</p>\r\n\r\n<p>What if we make the 5 a string?</p>\r\n\r\n<p>\r\n&raquo; \"friend\" + \"5\"<br>\r\nfriend5<br>\r\n</p>\r\n\r\n<p>What's another way that we could fix this error? What if we multiply instead of concatenating?</p>\r\n\r\n<p>\r\n&raquo; \"friend\" * 5<br>\r\nfriendfriendfriendfriendfriend<br>\r\n</p>\r\n\r\n<p>Let's do something new - let's try the <code>print</code> command:</p>\r\n\r\n<p>\r\n&raquo; print(\"friend\", 5)<br>\r\nfriend 5<br>\r\n</p>\r\n\r\n<p>When we use the <code>print</code> command, we can print multiple things, we just need to use commas to separate them.</p>", "step_number": 3, "image": "", "screencast": "", "step_name": "Fixing Errors", "lesson": 7, "audiocast": ""}, "model": "lessons.step", "pk": 49}, {"fields": {"header_title": "if Statements", "description": "<p>Ok, here's a small word with an important meaning.</p>\r\n\r\n<p>When we talk about logic, we\u2019re talking about making decisions about what to do next in our code.</p>\r\n\r\n<p>One of the ways we do that is with <b>if statements</b>.</p>\r\n\r\n<p>Here's what some everyday decisions might look like:</p>\r\n\r\n<ul>\r\n<p>\"<b>If</b> the alarm rings, get out of bed.\"</p>\r\n<p>\"<b>If</b> the dog is hungry, give it some food.\"</p>\r\n</ul>\r\n\r\n<p>Here's an example of what that might look like in Python code - <i>if</i> a condition is met, perform an action:</p>\r\n\r\n<p>\r\n&raquo; myname = \"Alfred\"<br>\r\n&raquo; if myname == \"Alfred\":<br>\r\n            print(\"Hi Alfred!\")<br>\r\n        Hi Alfred!<br>\r\n</p>\r\n\r\n<p>Let's break this down:</p>\r\n\r\n<p>First we created a variable called <code>myname</code> and gave it the value \"Alfred\".</p>\r\n\r\n<p>Then we told Python to do something if the value of that variable was equal to \"Alfred\".</p>\r\n\r\n<p>Well, of course, the value of <code>myname</code> is \"Alfred\", so Python did that something we asked it to - it printed out the words \"Hi Alfred!\".</p>\r\n\r\n<p>That's how you construct a simple <i>if</i> statement.</p>\r\n\r\n<p>There's something else important to notice here.</p>\r\n\r\n<p>Until now, we've only entered one line of code at a time in our Python interpreter.</p>\r\n\r\n<p>But these two lines need to be able to work together:</p>\r\n\r\n<p>\r\n&raquo; if myname == \"Alfred\":<br>\r\n            print(\"Hi Alfred!\")<br>\r\n</p>\r\n\r\n<p>We've done two new things here:</p>\r\n<ul class=\"learn\">\r\n<li>we ended the first line with a ':' (or a <i>colon</i>)<br>\r\n<li>then we <i>indented</i> the second line<br>\r\n</ul>\r\n\r\n<p>Ending the first line with a colon lets Python know that there is more code to follow. Indenting the second line tells Python that it should only perform this print command if the condition on the first line is True.</p>\r\n\r\n<p>Just to be safe, always indent 4 spaces (use the space bar, NOT the tab key!). If you're using Idle, Idle should automatically indent for you. But if you're using another shell to type this code, you may have to indent yourself.</p>\r\n\r\n<p>We'll see some more detailed examples later on that should make this easier to understand. For now, just pay close attention and make sure that the code examples you type match the ones on these pages.</p>", "step_number": 1, "image": "", "screencast": "", "step_name": "Making Decisions", "lesson": 8, "audiocast": ""}, "model": "lessons.step", "pk": 52}, {"fields": {"header_title": "if Statements", "description": "<p>Now let\u2019s add one extra choice to our real-life <i>if</i> statements:</p>\r\n\r\n<ul>\r\n<p>\"<b>If</b> the dog is hungry, feed it some lunch.<br>\r\n    Or <b>else</b> feed it in an hour.\u201d</p>\r\n<p>\"<b>If</b> we have chocolate cookies, I'll have two.<br>\r\n    Or <b>else</b> I'll just have a banana.\"</p>\r\n</ul>\r\n\r\n<p>To add a choice in our code we would use the <i>else</i> clause:</p>\r\n\r\n<p>\r\n&raquo; if myname == \"Ginger\":<br>\r\n            print(\"Hi Ginger!\")<br>\r\n        else:<br>\r\n            print(\"Impostor!\")<br>\r\n</p>", "step_number": 2, "image": "", "screencast": "", "step_name": "Adding A Choice", "lesson": 8, "audiocast": ""}, "model": "lessons.step", "pk": 53}, {"fields": {"header_title": "if Statements", "description": "<p>What if we want to add many choices? What would that look like?</p>\r\n\r\n<ul>\r\n\"<b>If</b> we have chocolate cookies, I'll take two.<br>\r\nOr <b>else if</b> we have cake, I'll have a slice!<br>\r\nOr <b>else if</b> there's cherry pie, give me 2 slices!<br>\r\nOr I\u2019ll just have a banana.\"\r\n</ul>\r\n\r\n<p>To add more choices to our code, we would use the <i>elif</i> clause:</p>\r\n\r\n<p>\r\n&raquo; if myname == \"Morgan\":<br>\r\n           print(\"Hi Morgan!\")<br>\r\n        elif name == \"Alfred\":<br>\r\n           print(\"Hi Alfred!\")<br>\r\n        else:<br>\r\n           print(\"Impostor!\")<br>\r\n</p>", "step_number": 3, "image": "", "screencast": "", "step_name": "Adding Many Choices", "lesson": 8, "audiocast": ""}, "model": "lessons.step", "pk": 54}, {"fields": {"header_title": "if Statements: Practice", "description": "<p><b>if / elif / else</b> practice</p>\r\n\r\n<p>Write an if statement that prints \"Yay!\" if the variable <code>mycolor</code> is \"yellow\".</p>\r\n\r\n<p>Add an elif clause and an else clause to print two different messages for other values of the variable.</p>\r\n\r\n<p>Here's our previous example:</p>\r\n\r\n<p>\r\n&raquo; if myname == \"Morgan\":<br>\r\n           print(\"Hi Morgan!\")<br>\r\n        elif name == \"Alfred\":<br>\r\n           print(\"Hi Alfred!\")<br>\r\n        else:<br>\r\n           print(\"Impostor!\")<br>\r\n</p>", "step_number": 4, "image": "", "screencast": "", "step_name": "Practice", "lesson": 8, "audiocast": ""}, "model": "lessons.step", "pk": 55}, {"fields": {"header_title": "if Statements: Practice", "description": "<p><b>if / elif / else</b> practice</p>\r\n\r\n<p>Write an if statement that prints \"Yay!\" if the variable <code>mycolor</code> is \"yellow\".</p>\r\n\r\n<p>Add an elif clause and an else clause to print two different messages for other values of the variable.</p>\r\n\r\n<p>Did you write something like this?:</p>\r\n\r\n<p>\r\n&raquo; mycolor = \"blue\"<br>\r\n&raquo; if mycolor == \"yellow\":<br>\r\n            print(\"Yay!\")<br>\r\n        elif mycolor == \"purple\":<br>\r\n            print(\"Try again!\")<br>\r\n        else:<br>\r\n       print(\"We want yellow!\")<br>\r\n</p>", "step_number": 5, "image": "", "screencast": "", "step_name": "Practice: Answers", "lesson": 8, "audiocast": ""}, "model": "lessons.step", "pk": 56}, {"fields": {"header_title": "Loops", "description": "<p>Now here's another way to use logic in our code.</p>\r\n\r\n<p>Loops are chunks of code that repeat a task over and over again.</p>\r\n\r\n<img src=\"/static/lessons/images/colored_loop.jpg\" style=\"border:0px solid black\">\r\n\r\n<ul>\r\n  <li><b>Counting</b> loops repeat a certain number of times.</li>\r\n  <li><b>Conditional</b> loops keep going until a certain thing happens (or as long as some condition is True).</li>\r\n</ul>\r\n", "step_number": 1, "image": "", "screencast": "", "step_name": "What Are Loops?", "lesson": 9, "audiocast": ""}, "model": "lessons.step", "pk": 58}, {"fields": {"header_title": "Loops", "description": "<p><i>Counting</i> loops repeat a certain number of times - they keep going until they get to the end of a count.</p>\r\n\r\n<p>\r\n&raquo; for mynum in [1, 2, 3, 4, 5]:<br>\r\n    print(\"Hello\", mynum)<br>\r\n<br>\r\nHello 1<br>\r\nHello 2<br>\r\nHello 3<br>\r\nHello 4<br>\r\nHello 5<br>\r\n</p>\r\n\r\n<p>Notice the list of integers in the very first line of code: [1, 2, 3, 4, 5]</p>\r\n\r\n<p>What this loop is doing is going over that list, and for each item in the list, it's printing the word \"Hello\" along with that item.</p>\r\n\r\n<p><code>mynum</code> is a variable - for each item in the list, a new value is assigned to it.</p>\r\n\r\n<p>The loop starts with the first item in the list and gives a value of 1 to <code>mynum</code>. Python then  takes that value and prints out 'Hello 1'.</p>\r\n\r\n<p>Then ithe loop goes back up to the next item in the list. The value of <code>mynum</code> becomes 2, Python prints out 'Hello 2', and so on.</p>\r\n\r\n<p>This keeps going until Python gets to the last item in the list - the number 5. After that, there are no more items, so the loop stops running.</p>\r\n\r\n<p>The <b>for</b> keyword is used to create this kind of loop, so it is usually just called a <i>for loop</i>.</p>", "step_number": 2, "image": "", "screencast": "", "step_name": "Counting Loops", "lesson": 9, "audiocast": ""}, "model": "lessons.step", "pk": 59}, {"fields": {"header_title": "Loops", "description": "<p><i>Conditional</i> loops repeat until something happens (or as long as some condition is True).</p>\r\n\r\n<p>\r\n&raquo; mycount = 0<br>\r\n&raquo; while (mycount < 4):<br>\r\n    print 'The count is:', mycount<br>\r\n    mycount = mycount + 1<br>\r\n<br>\r\nThe count is: 0<br>\r\nThe count is: 1<br>\r\nThe count is: 2<br>\r\nThe count is: 3<br>\r\n</p>\r\n\r\n<p>Notice that before we start our loop, we create a variable named <code>mycount</code> and give it a value of zero.</p>\r\n\r\n<p>\r\n&raquo; mycount = 0<br>\r\n</p>\r\n\r\n<p>The first thing this loop does is ask if the current value of <code>mycount</code> is less than 4. Well, we just gave it a value of 0, so we know that is True.</p>\r\n\r\n<p>\r\n&raquo; while (mycount < 4):</li>\r\n</p>\r\n\r\n<p>This <i>expression</i> is True, so Python can run the code in the indented lines below it. Python prints the words 'The count is:' along with the value of <code>mycount</code>, which is 0.</p>\r\n\r\n<p>\r\n    print 'The count is:', mycount</span>\r\n</p>\r\n\r\n<p>But what is that expression below the print statement? Remember that we can use variables in some math operations. Since the current value of <code>mycount</code> is 0, we can add 1 to it, and the value of <code>mycount</code> becomes 1.</p>\r\n\r\n<p>\r\n    mycount = mycount + 1</span>\r\n</p>\r\n\r\n<p>Back up at the top of the loop, in the <i>while</i> statement, Python asks once again if the value of <code>mycount</code> is less than 4. Well, the value of <code>mycount</code> has changed - it's now 1. But that is still less than 4, so we can continue. Python prints 'The count is: 1' and then adds 1 to the value of <code>mycount</code>.</p>\r\n\r\n<p>Now the value of <code>mycount</code> has been increased to 2. Is that less than 4? Why, yes it is. So Python prints 'The count is: 2' and then adds 1 to <code>mycount</code>.</p>\r\n\r\n<p>The value of <code>mycount</code> is now 3, and that is still less than 4, so again Python prints, and again adds 1 to the <code>mycount</code>.</p>\r\n\r\n<p>But wait - is <code>mycount</code> still less than 4? Nope - <code>mycount</code> is now equal to 4. So that while statement is no longer True, and the loop stops running.</p>\r\n\r\n<p>The <b>while</b> keyword is used to create this kind of loop, so it is usually just called a <i>while loop</i>.</p>\r\n", "step_number": 3, "image": "", "screencast": "", "step_name": "Conditional Loops", "lesson": 9, "audiocast": ""}, "model": "lessons.step", "pk": 60}, {"fields": {"header_title": "Functions", "description": "<p>Remember our PB&J example?</p>\r\n\r\n<p align=\"center\">Which list looks easier?:</p>\r\n\r\n<table>\r\n  <tr valign=\"top\">\r\n    <td>\r\n        <ol>\r\n        <li>Get bread</li>\r\n        <li>Get knife</li>\r\n        <li>Open peanut butter</li>\r\n        <li>Put peanut butter on knife</li>\r\n        <li>Spread peanut butter on bread</li>\r\n        </ol>\r\n    </td>\r\n    <td>\r\n      <ol>\r\n          <li>Make a peanut butter and jelly sandwich</li>\r\n      </ol>\r\n    </td>\r\n    </tr>\r\n</table>\r\n\r\n<p><b>Functions</b> are a way to group instructions.</p>", "step_number": 1, "image": "", "screencast": "", "step_name": "Functions", "lesson": 10, "audiocast": ""}, "model": "lessons.step", "pk": 62}, {"fields": {"header_title": "Functions", "description": "<p>We all know how to make a PB&J.</p>\r\n\r\n<p>But we don\u2019t have to think about all the steps it takes every time, because the steps are already grouped together in our minds as \"make a peanut butter and jelly sandwich\".</p>\r\n\r\n<p>What it's like in our minds:</p>\r\n\r\n<p>\"Make a peanut butter and jelly sandwich.\"</p>\r\n\r\n<p>In Python, you might say it something like this:</p>\r\n\r\n<div class=\"codewrap\"><pre>\r\n  make_pbj(bread, pb, jam, knife)\r\n</pre></div>\r\n\r\n<p>What if we wanted to make many kinds of sandwiches?</p>\r\n\r\n<ul>\r\n\"Make a peanut butter and jelly sandwich.\"<br>\r\n\"Make a cheese and mustard sandwich.\"\r\n</ul>\r\n\r\n<p>In Python, that might be expressed as:</p>\r\n \r\n<div class=\"codewrap\"><pre>\r\n    make_sandwich(bread, filling, toppings)\r\n</pre></div>\r\n\r\n<p>In this imaginary function, <code>make_sandwich</code> is the function name, and <code>bread</code>, <code>filling</code>, and <code>toppings</code> are the function's <i>parameters</i>.</p>\r\n\r\n<div class=\"codewrap\"><pre>\r\n    make_sandwich(bread, filling, toppings)\r\n          ^          ^-----^-------^\r\n     function name   function parameters\r\n</pre></div>\r\n\r\n", "step_number": 2, "image": "", "screencast": "", "step_name": "Make A PB&J Function", "lesson": 10, "audiocast": ""}, "model": "lessons.step", "pk": 63}, {"fields": {"header_title": "Functions", "description": "<p>Let\u2019s put together some of the things we\u2019ve already learned and write some functions.</p>\r\n\r\n<p>First we'll <u>define</u> a function in the interpreter:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>def say_hello():<br>\r\n       <span class=\"indent\">print('Hello')</span></li>\r\n</ul></div>\r\n\r\n<p>This function doesn\u2019t have any parameters, but it still does something. That something that it does - printing the word \"Hello\" - is called the <i>body</i> of the function.</p>\r\n\r\n<p>Now we'll <u>call</u> the function:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>say_hello()<br>\r\nHello</li>\r\n</ul></div>", "step_number": 3, "image": "", "screencast": "", "step_name": "Define And Call A Function", "lesson": 10, "audiocast": ""}, "model": "lessons.step", "pk": 65}, {"fields": {"header_title": "Functions", "description": "<p>Now let's define a function with <b>parameters</b> (also called <i>arguments</i>):</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>def say_hello(myname): <br>\r\n       <span class=\"indent\">print('Hello', myname)</span></li>\r\n</ul></div>\r\n\r\n<p>This time, when we <i>call</i> our function, we need to pass it a value - we'll put the string \"Batman\" inside the parentheses:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>say_hello(\"Batman\")<br>\r\nHello Batman</li>\r\n</ul></div>\r\n\r\n<p>What does the function do if we give it a different string?</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>say_hello(\"Sarah\")<br>\r\nHello Sarah</li>\r\n</ul></div>\r\n\r\n<p>See how we can make our function do different things just by passing in different arguments?</p>\r\n\r\n<p>What happens if we pass our string a number? Or some other type of data?</p>\r\n", "step_number": 4, "image": "", "screencast": "", "step_name": "Add Parameters", "lesson": 10, "audiocast": ""}, "model": "lessons.step", "pk": 66}, {"fields": {"header_title": "Functions", "description": "\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>def say_hello(myname):<br>\r\n       <span class=\"indent\">print('Hello', myname)</span></li>\r\n</pre></div>\r\n\r\n<ul>\r\n  <li>\r\n    <b>def</b> - This is a <i>keyword</i>. We use this to let Python know that we\u2019re defining a function.\r\n  </li>\r\n  <li>\r\n    <i><b>myname</b></i> - This is a <i>parameter</i> (and a <i>variable</i>). We use this to represent values in the function.\r\n  </li>\r\n  <li>\r\n    <i><b>print('Hello', myname)</b></i> - This part is the <i>body</i> of the function. This is where we describe what the function <i>does</i>.\r\n  </li>\r\n</ul>\r\n", "step_number": 5, "image": "", "screencast": "", "step_name": "Parts Of A Function", "lesson": 10, "audiocast": ""}, "model": "lessons.step", "pk": 67}, {"fields": {"header_title": "Functions: Practice", "description": "<p>1. Create a function that <b>doubles a number</b> and prints it out.</p>\r\n\r\n<p>Here\u2019s our previous example:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>def say_hello(myname):<br>\r\n       <span class=\"indent\">print('Hello', myname)</span><br>\r\n    </li>\r\n</ul></div>\r\n\r\n", "step_number": 6, "image": "", "screencast": "", "step_name": "Practice 1", "lesson": 10, "audiocast": ""}, "model": "lessons.step", "pk": 68}, {"fields": {"header_title": "Functions: Practice", "description": "<p>1. Create a function that <b>doubles a number</b> and prints it out.</p>\r\n\r\n<p>Did your answer look something like this?</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>def double(number):<br>\r\n       <span class=\"indent\">print(number * 2)</span></li>\r\n</ul></div>\r\n\r\n<p>What happens when you call your new function?</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>double(14)<br>\r\n28</li>\r\n</ul></div>\r\n\r\n<p>What happens when you pass it a string instead of a number?</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>double(\"hello\")<br>\r\nhellohello</li>\r\n</ul></div>\r\n", "step_number": 7, "image": "", "screencast": "", "step_name": "Practice 1: Answers", "lesson": 10, "audiocast": ""}, "model": "lessons.step", "pk": 69}, {"fields": {"header_title": "Functions: Practice", "description": "<p>2. Create a function that takes <b>two numbers</b>, multiplies them together, and prints out the result</p>\r\n\r\n<p>Here\u2019s our previous example:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>def double(number):<br>\r\n       <span class=\"indent\">print(number * 2)</span><br>\r\n    </li>\r\n</ul></div>\r\n", "step_number": 8, "image": "", "screencast": "", "step_name": "Practice 2", "lesson": 10, "audiocast": ""}, "model": "lessons.step", "pk": 70}, {"fields": {"header_title": "Functions: Practice", "description": "<p>2. Create a function that takes <b>two numbers</b>, multiplies them together, and prints out the result.</p>\r\n\r\n<p>Did your answer look something like this?</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>def multiply(num1, num2):<br>\r\n        <span class=\"indent\">print(num1 * num2)</span><br>\r\n    </li>\r\n</ul></div>\r\n\r\n<p>What happens when you call this new function?</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>multiply(4, 5)<br>\r\n20\r\n    </li>\r\n</ul></div>\r\n\r\n<p>What happens when you pass it one string instead of a number?</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>multiply(\"hello\", 5)<br>\r\nhellohellohellohellohello\r\n    </li>\r\n</ul></div>\r\n\r\n", "step_number": 9, "image": "", "screencast": "", "step_name": "Practice 2: Answers", "lesson": 10, "audiocast": ""}, "model": "lessons.step", "pk": 71}, {"fields": {"header_title": "Functions: Output", "description": "<p>We know that calling the <code>print()</code> function displays something to the screen. Here we use <code>print()</code> in our function:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>def double(number):<br>\r\n        <span class=\"indent\">print(number * 2)</span>\r\n    </li>\r\n</ul></div>\r\n\r\n<p>Then call the function, passing it the number 12:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>double(12)<br>\r\n24</li>\r\n</ul></div>\r\n\r\n<p>Let's call the function again, this time assigning it to the variable <code>new_number</code>:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>new_number = double(12)<br>\r\n24</li>\r\n</ul></div>\r\n\r\n<p>But what happens here?</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>new_number</li>\r\n</ul></div>\r\n\r\n<p>We\u2019ve worked with <code>print()</code> in a few of our examples, so we know what it does - we give it a value and it shows that value in our interpreter. But all it does is display that value - the value isn\u2019t saved.</p>\r\n\r\n<p>Let\u2019s look at our example. We've defined a function called <code>double</code> that takes a number and multiplies it by two. When we call that function and assign its value to the variable <code>new_number</code>, it will return the number 24.</p>\r\n\r\n<p>But the next time you enter <code>new_number</code>, it doesn\u2019t have the value 24 anymore. The value hasn\u2019t been saved.</p>\r\n", "step_number": 10, "image": "", "screencast": "", "step_name": "Output: print", "lesson": 10, "audiocast": ""}, "model": "lessons.step", "pk": 72}, {"fields": {"header_title": "Functions: Output", "description": "<p>This time let's use <code>return</code> instead of <code>print</code>.</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>def double(number):<br>\r\n        <span class=\"indent\">return number * 2</span></li>\r\n</ul></div>\r\n\r\n<p>We call the function, passing it the number 12:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>double(12)<br>\r\n24</li>\r\n</ul></div>\r\n\r\n<p>We call the function again, assigning the value to the variable <code>new_number</code>:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>new_number = double(12)<br>\r\n24</li>\r\n</ul></div>\r\n\r\n<p>Now what happens here?</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>new_number<br>\r\n24</li>\r\n    <li>new_number<br>\r\n24</li>\r\n</ul></div>\r\n\r\n<p>This time when you give <code>new_number</code> a value from the function, it will return that value - 24 - and now the value is saved.</p>\r\n\r\n<p>When you type <code>new_number</code> again, you\u2019ll see the same value until you decide to change it.</p>\r\n", "step_number": 11, "image": "", "screencast": "", "step_name": "Output: return", "lesson": 10, "audiocast": ""}, "model": "lessons.step", "pk": 73}, {"fields": {"header_title": "Functions: Rules", "description": "<ul>\r\n  <li>Functions are <i>defined</i> using <b>def</b>.</li>\r\n  <li>Functions are <i>called</i> using <b>parentheses</b>.</li>\r\n  <li>Functions take <b>parameters</b> and can return <b>outputs</b>.</li>\r\n  <li><b>print</b> <i>displays</i> information, but does not save a value.</li>\r\n  <li><b>return</b> <i>stores</i> a value and gives it to the caller</li>\r\n</ul>\r\n", "step_number": 12, "image": "", "screencast": "", "step_name": "Rules", "lesson": 10, "audiocast": ""}, "model": "lessons.step", "pk": 74}, {"fields": {"header_title": "Input", "description": "<p><b>Input</b> is information we pass to a function so that we can do something with it.</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>def hello_there(myname):<br>\r\n        <span class=\"indent\">print(\"Hello\", myname)</span></li>\r\n</pre></div>\r\n\r\n<p>In this example, the string \"Brienne\" is the input, represented by the variable <code>myname</code>.</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>hello_there(\"Brienne\")<br>\r\n'Hello there Brienne'</li>\r\n</pre></div>\r\n\r\n<p><code>myname</code> is also the function's only <i>parameter</i>.</p>\r\n", "step_number": 1, "image": "", "screencast": "", "step_name": "What is input?", "lesson": 11, "audiocast": ""}, "model": "lessons.step", "pk": 76}, {"fields": {"header_title": "Input", "description": "<p>Here\u2019s another way to interact with Python and pass input to a function.</p>\r\n\r\n<p>The <code>input()</code> function takes <i>input</i> from the user - you give that input to the function by typing it.</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>\r\n    def hello_there():<br>\r\n        <span class=\"indent\">print(\"Type your name:\")</span><br>\r\n        <span class=\"indent\">name = input()</span><br>\r\n        <span class=\"indent\">print(\"Hi\", name, \"how are you?\")</span><br>\r\n    </li>\r\n</ul></div>\r\n\r\n<p>Now what happens when you call this function?</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>hello_there()<br>\r\n        Type your name:<br>\r\n        <b>Barbara</b><br>\r\n        Hi Barbara how are you?\r\n    </li>\r\n</ul></div>\r\n", "step_number": 2, "image": "", "screencast": "", "step_name": "Example", "lesson": 11, "audiocast": ""}, "model": "lessons.step", "pk": 78}, {"fields": {"header_title": "Input", "description": "<p>A shortcut:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>def hello_there():<br>\r\n        <span class=\"indent\">name = input(\"Type your name: \")</span><br>\r\n        <span class=\"indent\">print(\"Hi\", name, \"how are you?\")</span><br>\r\n    </li>\r\n</ul></div>\r\n\r\n<p>You can assign the value returned by the <code>input()</code> function directly to a variable - in this case, the variable <code>name</code>.</p>\r\n\r\n<p>Now what happens when you call the function? Does anything change?</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>hello_there()<br>\r\n        Type your name: <b>Brienne</b><br>\r\n        Hi Brienne how are you?\r\n    </li>\r\n</ul></div>\r\n", "step_number": 3, "image": "", "screencast": "", "step_name": "Shortcut", "lesson": 11, "audiocast": ""}, "model": "lessons.step", "pk": 79}, {"fields": {"header_title": "Modules", "description": "<div style=\"float: right;\"><img src=\"/static/lessons/images/modular_toy.jpg\" style=\"border:0px solid black\"></div>\r\n\r\n<div style=\"font-size: 24px;\">\r\n<p>A <i>module</i> is a block of code that can be combined with other blocks to build a program.</p>\r\n<p>You can use different combinations of modules to do different jobs, just like you can combine the same LEGO blocks in many different ways.</p>\r\n</div>\r\n\r\n<div class=\"clear\"></div>", "step_number": 1, "image": "", "screencast": "", "step_name": "What Are Modules?", "lesson": 13, "audiocast": ""}, "model": "lessons.step", "pk": 81}, {"fields": {"header_title": "Modules", "description": "<p>Lots of modules are included in the <a href=\"https://docs.python.org/2/library/ target=\"new\">Python Standard Library</a>.</p>\r\n\r\n<p>Here\u2019s how you can use a few of these modules.</p>\r\n\r\n<p>Generate a random number between 1-100:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>import random</li>\r\n    <li>print(random.randint(1,100))</li>\r\n</ul></div>\r\n\r\n<p>(In the example above, the two arguments - 1 and 100 - represent a range.)</p>\r\n\r\n<p>What time zone does your computer think it\u2019s in?:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>import time</li>\r\n    <li>time.tzname</li>\r\n</ul></div>\r\n\r\n<p>Print a calendar for this month!:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>import calendar</li>\r\n    <li>calendar.prmonth(2015, 10)</li>\r\n</ul></div>\r\n\r\n<p>When you <b>import</b> a module, you get to use all the functions inside that module.</p>\r\n\r\n<p>Let's talk about something new we're seeing here.</p>\r\n\r\n<p>In the first example, we used the keyword <code>import</code> to get access to a module named <code>random</code>. Inside that module are many functions, but the one we want to use is named <code>randint</code>.</p>\r\n\r\n<p>In order to call the <code>randint()</code> function, we use something called <i>dot notation</i> - that just means putting a dot between the module name and the function name.</p>\r\n\r\n<p>random.randint(1,100)</p>", "step_number": 2, "image": "", "screencast": "", "step_name": "Python Standard Library", "lesson": 13, "audiocast": ""}, "model": "lessons.step", "pk": 82}, {"fields": {"header_title": "Modules", "description": "<p>Print the names of all the files in a directory:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>import os</li>\r\n    <li>for file in os.listdir(\"~/Desktop/\"):<br>\r\n           <span class=\"indent\">print(file)</span></li>\r\n</ul></div>\r\n\r\n<p>The os module gives us functions that we can use to do things with our <i>file system</i>, or all the files and folders that live on our computers. The function we're calling here, called <code>listdir()</code>, lists files in a given folder. We pass the folder name as an argument.</p>\r\n\r\n<p>If you're calling this function, make sure that that folder name is one you actually have on your system.</p>", "step_number": 3, "image": "", "screencast": "", "step_name": "Finding Files", "lesson": 13, "audiocast": ""}, "model": "lessons.step", "pk": 83}, {"fields": {"header_title": "Modules", "description": "<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>import turtle</li>\r\n    <li>turtle.reset()</li>\r\n    <li>turtle.forward(20)</li>\r\n    <li>turtle.right(20)</li>\r\n    <li>turtle.forward(20)</li>\r\n    <li>turtle.bye()</li>\r\n</ul></div>\r\n\r\n<p>You can find out about many other modules at: <a href=\"http://docs.python.org\" target=\"new\">http://docs.python.org</a></p>\r\n", "step_number": 5, "image": "", "screencast": "", "step_name": "Turtles!", "lesson": 13, "audiocast": ""}, "model": "lessons.step", "pk": 84}, {"fields": {"header_title": "Games", "description": "<h3>Let's make a game!</h3>\r\n\r\n<p>From the IDLE menu, open a new window (File > New Window) and type these lines:</p>\r\n\r\n<div class=\"codewrap\">\r\n<pre>\r\nsecret_number = 7\r\n\r\nguess = input(\"What number am I thinking of? \")\r\n\r\nif secret_number == guess:\r\n    print(\"Yay! You got it!\")\r\nelse:\r\n    print(\"No, that's not it.\")\r\n</pre>\r\n</div>\r\n\r\n<p>From the IDLE menu, choose Run > Run Module.</p>\r\n\r\n<p>You'll be prompted to save the file - give it the name 'guess.py' and save it in a location you'll remember, such as your desktop.</p>\r\n\r\n<p>What do you see in the interpreter?</p>\r\n", "step_number": 1, "image": "", "screencast": "", "step_name": "Let's Make A Game!", "lesson": 14, "audiocast": ""}, "model": "lessons.step", "pk": 86}, {"fields": {"header_title": "Games", "description": "<p>From the IDLE menu, open a new window (File > New Window) and type these lines:</p>\r\n\r\n<div class=\"codewrap\">\r\n<pre>\r\nfrom random import randint\r\n\r\nsecret_number = randint(1, 10)\r\n\r\nwhile True:\r\n    guess = input(\"What number am I thinking of? \")\r\n\r\n    if secret_number == guess:\r\n        print(\"Yay! You got it!\")\r\n        break\r\n    else:\r\n        print(\"No, that's not it.\")\r\n</pre>\r\n</div>\r\n\r\n<p>From the IDLE menu, choose Run > Run Module.</p>\r\n\r\n<p>When prompted, save the file with the name 'guess2.py'.</p>\r\n\r\n<p>What do you see in the interpreter?</p>\r\n", "step_number": 2, "image": "", "screencast": "", "step_name": "Another Version", "lesson": 14, "audiocast": ""}, "model": "lessons.step", "pk": 87}, {"fields": {"header_title": "Games", "description": "<p>From the IDLE menu, open a new window (File > New Window) and type these lines:</p>\r\n\r\n<div class=\"codewrap\">\r\n<pre>\r\nfrom random import randint\r\n\r\nsecret_number = randint(1, 10)\r\n\r\nwhile True:\r\n    guess = input(\"What number am I thinking of? \")\r\n\r\n    if secret_number == guess:\r\n        print(\"Yay! You got it!\")\r\n        break\r\n    elif secret_number > guess:\r\n        print(\"No, that's too low.\")\r\n    else:\r\n        print(\"No, that's too high.\")\r\n</pre>\r\n</div>\r\n\r\n<p>From the IDLE menu, choose Run > Run Module.</p>\r\n\r\n<p>Save the file with the name 'guess3.py'.</p>\r\n\r\n<p>What do you see in the interpreter?</p>\r\n", "step_number": 3, "image": "", "screencast": "", "step_name": "More Changes", "lesson": 14, "audiocast": ""}, "model": "lessons.step", "pk": 88}, {"fields": {"header_title": "Minecraft", "description": "<p><b>Minecraft on your Raspberry Pi:</b></p>\r\n\r\n<p><a href=\"https://www.raspberrypi.org/learning/getting-started-with-minecraft-pi/worksheet/\">https://www.raspberrypi.org/learning/getting-started-with-minecraft-pi/worksheet/</a></p>\r\n\r\n<p><a href=\"http://www.stuffaboutcode.com/p/minecraft-api-reference.html\">http://www.stuffaboutcode.com/p/minecraft-api-reference.html</a></p>\r\n", "step_number": 1, "image": "YoungCoders_16_1_body.jpg", "screencast": "", "step_name": "Minecraft", "lesson": 15, "audiocast": ""}, "model": "lessons.step", "pk": 90}, {"fields": {"header_title": "Minecraft", "description": "<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>from mcpi import minecraft</li>\r\n    <li>mc = minecraft.Minecraft.create()</li>\r\n<br>\r\n    <li>mc.postToChat(\"Hello world\")</li>\r\n<br>\r\n    <li>pos = mc.player.getPos()</li>\r\n    <li>print pos.x, pos.y, pos.z</li>\r\n<br>\r\n    <li>mc.player.setPos(pos.x, pos.y+100, pos.z)</li>\r\n<br>\r\n    <li>mc.setBlock(pos.x+1, pos.y, pos.z, 1)</li>\r\n</ul></div>", "step_number": 2, "image": "", "screencast": "", "step_name": "Starting Up Minecraft", "lesson": 15, "audiocast": ""}, "model": "lessons.step", "pk": 91}, {"fields": {"header_title": "Minecraft", "description": "<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>from mcpi import block</li>\r\n    <br>\r\n    <li>dirt = block.DIRT.id</li>\r\n    <li>mc.setBlock(x, y, z, dirt)</li>\r\n    <br>\r\n    <li>stone = block.STONE.id</li>\r\n    <li>mc.setBlocks(x+1, y+1, z+1, x+11, y+11, z+11, stone)</li>\r\n    <br>\r\n    <li>tnt = 46</li>\r\n    <li>mc.setBlocks(x+1, y+1, z+1, x+11, y+11, z+11, tnt)</li>\r\n    <li>mc.setBlocks(x+1, y+1, z+1, x+11, y+11, z+11, tnt, <b>1</b>)</li>\r\n</ul></div>\r\n", "step_number": 3, "image": "", "screencast": "", "step_name": "Setting Blocks", "lesson": 15, "audiocast": ""}, "model": "lessons.step", "pk": 92}, {"fields": {"header_title": "", "description": "<ul>\r\n  <li>Make more games</li>\r\n  <li>Edit music and videos</li>\r\n  <li>Build web sites</li>\r\n  <li>Write a program that does your homework for you ...</li>\r\n  <li>What are some other ideas?</li>\r\n</ul>\r\n\r\n<h2>Congratulations! You're A Pythonista!</h2>\r\n", "step_number": 1, "image": "", "screencast": "", "step_name": "What Else Can You Do With Python?", "lesson": 17, "audiocast": ""}, "model": "lessons.step", "pk": 94}, {"fields": {"header_title": "", "description": "<h3>Where to find more information about learning Python</h3>\r\n<br>\r\n<h4>The official Python web site has a lot of resources for beginners:</h4>\r\n<ul>\r\n<li><a href=\"https://www.python.org/\" target=\"new\">Python.org</a></li>\r\n<li><a href=\"https://www.python.org/about/gettingstarted/\" target=\"new\">Python For Beginners</a></li>\r\n<li><a href=\"https://wiki.python.org/moin/BeginnersGuide\" target=\"new\">Beginner's Guide to Python</a></li>\r\n<li><a href=\"http://www.learnpython.org/\" target=\"new\">Learn Python interactive tutorial</a></li>\r\n</ul>\r\n\r\n<h4>Some other web sites where you'll find great beginner guides:</h4>\r\n<ul>\r\n<li><a href=\"http://learnpythonthehardway.org/book/intro.html\" target=\"new\">Learn Python the Hard Way</a></li>\r\n<li><a href=\"https://www.raspberrypi.org/learning/python-intro/\" target=\"new\">Python Intro for Raspberry Pi</a></li>\r\n<li><a href=\"http://www.diveintopython.net/toc/index.html\" target=\"new\">Dive Into Python</a></li>\r\n<li><a href=\"http://www.pygame.org/wiki/about\" target=\"new\">PyGame</a></li>\r\n</ul>\r\n\r\n<h4>Books we love:</h4>\r\n<ul>\r\n<li><a href=\"https://www.amazon.com/Python-Kids-Playful-Introduction-Programming/dp/1593274076/\" target=\"new\">Python for Kids: A Playful Introduction to Programming</a> by Jason R. Briggs</li>\r\n<li><a href=\"https://www.amazon.com/Hello-World-Computer-Programming-Beginners/dp/1617290920/\" target=\"new\">Hello World!: Computer Programming for Kids and Other Beginners</a> by Warren Sande and Carter Sande</li>\r\n<li><a href=\"https://www.amazon.com/Learn-Program-Minecraft-Transform-Python/dp/1593276702/\" target=\"new\">Learn to Program with Minecraft: Transform Your World with the Power of Python</a> by Craig Richardson</li>\r\n<li><a href=\"https://www.amazon.com/Python-Programming-Absolute-Beginner-3rd/dp/1435455002/\" target=\"new\">Python Programming for the Absolute Beginner</a> by Michael Dawson</li>\r\n<li><a href=\"https://www.amazon.com/Automate-Boring-Stuff-Python-Programming/dp/1593275994/\" target=\"new\">Automate the Boring Stuff with Python: Practical Programming for Total Beginners</a> by Al Sweigart</li>\r\n<li><a href=\"https://www.amazon.com/Python-Crash-Course-Hands--Project-Based/dp/1593276036/\" target=\"new\">Python Crash Course: A Hands-On, Project-Based Introduction to Programming</a> by Eric Matthes</li>\r\n<li><a href=\"https://www.amazon.com/Python-Programming-Become-Instructions-Beginners/dp/1533337772/\" target=\"new\">Python Programming: Become an Expert at Python Today with Step by Step Instructions for Beginners</a> by Nick Goddard</li>\r\n</ul>\r\n", "step_number": 2, "image": "", "screencast": "", "step_name": "Resources", "lesson": 17, "audiocast": ""}, "model": "lessons.step", "pk": 95}, {"fields": {"header_title": "", "description": "<p>The Python language comes with a tool called an 'interpreter'. You might also see it referred to as an 'interactive shell'.</p>\r\n\r\n<p>Out in the real world we know what an interpreter is - it's a person who translates from one language to another. Well in the computer world, we need a program to translate our Python code into another kind of language that the computer can understand.</p>\r\n\r\n<p>In other words, the interpreter lets you interact with your computer using the Python language.</p>\r\n\r\n<p>Here you can see an example of what an interpreter might look like:</p>\r\n\r\n<p><a href=\"https://www.python.org/shell/\" target=\"new\">https://www.python.org/shell/</a></p>\r\n\r\n<p>Once the shell is started, you might notice a few things:</p>\r\n\r\n<p>At the very top you should see the word 'Python' followed by some numbers. Those numbers mean the version of Python that's installed where the shell is running. The version you have installed on your own computer might be a little different, but as long as it starts with a 2 or 3, you should be okay.</p>\r\n\r\n<p>The other important thing is the three arrows at the bottom. In some shells, you might see a flashing cursor next to the arrows. In the version on the Python web site, we see a red box that indicates where you should start typing.</p>\r\n\r\n<p>We call this a 'prompt', and this is the place where you'll type Python code.</p>", "step_number": 4, "image": "", "screencast": "", "step_name": "The Python interpreter", "lesson": 16, "audiocast": ""}, "model": "lessons.step", "pk": 97}, {"fields": {"header_title": "", "description": "<p>If you're using a Raspberry Pi, you can skip this step - the Raspberry Pi comes with Python already installed.</p>\r\n\r\n<p>If you're working on your own computer, here is some information about installing Python for different operating systems.</p>\r\n\r\n<h3>Apple/MacBook</h3>\r\n\r\n<p>Versions of Mac OSX going all the way back to MacOS 10.2 (Jaguar) should already have a version of Python installed. However, for this tutorial, you will need a version from the Python 3 series. We recommend downloading and installing Python 3.5.1.</p>\r\n\r\n<p>Downloads for Mac OSX can be found here:</p>\r\n\r\n<p><a href=\"https://www.python.org/downloads/mac-osx/\" target=\"new\">http://www.python.org/downloads/mac-osx/</a></p>\r\n\r\n<p>You'll be downloading a package that comes with an installer. Once you run that, you should be able to go into your Applications folder, find the Python 3.5 folder, and double-click to launch Idle.</p>\r\n\r\n<p>For more information about installing and running Python on a Mac, see this page:</p>\r\n\r\n<p><a href=\"https://docs.python.org/3/using/mac.html\" target=\"new\">http://docs.python.org/3/using/mac.html</a></p>\r\n\r\n<h3>Windows</h3>\r\n\r\n<p>Python packages for Windows come with easy graphical installers. To start, download a package from this page. You will need a version from the Python 3 series. We recommend downloading and installing Python 3.5.1:</p>\r\n\r\n<p><a href=\"https://www.python.org/downloads/windows/\" target=\"new\">http://www.python.org/downloads/windows/</a></p>\r\n\r\n<p>For detailed information about running the installer and launching Python on your Windows desktop, please see the documentation on this page:</p>\r\n\r\n<p><a href=\"https://docs.python.org/3/using/windows.html\" target=\"new\">http://docs.python.org/3/using/windows.html</a></p>\r\n\r\n<h3>Linux</h3>\r\n\r\n<p>If you are using a computer with Linux desktop, you'll find Python downloads here:</p>\r\n\r\n<p><a href=\"https://www.python.org/downloads/source/\" target=\"new\">http://www.python.org/downloads/source/</a></p>\r\n\r\n<p>Remember, you will need a version from the Python 3 series. We recommend downloading and installing Python 3.5.1.</p>\r\n\r\n<p>For more information about installing Python, see this documentation page:</p>\r\n\r\n<p><a href=\"https://docs.python.org/3/using/unix.html\" target=\"new\">https://docs.python.org/3/using/unix.html</a></p>", "step_number": 2, "image": "", "screencast": "", "step_name": "Installing Python", "lesson": 16, "audiocast": ""}, "model": "lessons.step", "pk": 98}, {"fields": {"header_title": "", "description": "<p>If installing Python just isn't an option, don't despair! There are still a few places online where you can practice with Python.</p>\r\n\r\n<p>You won't be able to use these browser-based tools for saving files and creating <a href=\"/learn/lesson/14/step/1/\">Games</a>, or for interacting with <a href=\"/learn/lesson/15/step/1/\">Minecraft</a>, but you can still use them to type most of the commands from this tutorial.</p>\r\n\r\n<ul>\r\n  <li><a href=\"https://www.python.org/shell/\" target=\"new\">The official Python web site</a></li>\r\n  <li><a href=\"https://repl.it/languages/python3\" target=\"new\">repl.it</a></li>\r\n  <li><a href=\"http://www.pythontutor.com/live.html#mode=edit\" target=\"new\">PythonTutor</a></li>\r\n  <li><a href=\"http://www.learnpython.org/\" target=\"new\">LearnPython.org</a></li>\r\n  <li><a href=\"https://www.codecademy.com/learn/python\" target=\"new\">CodeAcademy</a></li>\r\n</ul>\r\n\r\n<p><a href=\"http://ideone.com/\" target=\"new\">IdeOne</a> has an in-browser environment that allows you to save several lines of code and run them as a script - you can use this for the exercises in the <a href=\"/learn/lesson/14/step/1/\">Games</a> section (be sure to select Python3 when running your code).</p>\r\n\r\n", "step_number": 3, "image": "", "screencast": "", "step_name": "Other Options", "lesson": 16, "audiocast": ""}, "model": "lessons.step", "pk": 99}, {"fields": {"header_title": "", "description": "<p>To learn Python with the exercises on this web site, we're going to use an application called IDLE.</p>\r\n\r\n<p>IDLE is a program that's also a programming environment. This is where we're going to write our Python code.</p>\r\n\r\n<p>IDLE works a lot like a regular Python interpreter, but it has some special features that will make it easier to learn.</p>\r\n\r\n<h3>Opening IDLE</h3>\r\n\r\n<p>If you're using a Raspberry Pi, you should see an IDLE icon on your desktop or in your programs menu. Just double-click on that icon to open the program.</p>\r\n\r\n<p>If you're using a Mac or Linux computer, you'll need to go to your Applications folder, find the IDLE icon (it should be in a Python folder) and click on it.</p>\r\n\r\n<p>If you're using Windows, go to the Start menu, look for Python, and select IDLE.</p>\r\n\r\n<p><img src=\"/static/lessons/images/idle.png\" width=\"600px\"></p>\r\n\r\n<p>IDLE looks a lot like the interpreter we just saw on python.org doesn't it? It has some of the same features - a Python version number at the top, and a prompt (in this case, the prompt should look like three arrows, or \">>>\").</p>\r\n\r\n<p>Remember that when we type something at that prompt and hit Enter, Idle is:</p>\r\n<ul>\r\n<li>translating what we've typed</li>\r\n<li>talking to the computer</li>\r\n<li>then getting an answer from the computer and sending it back to us in a language that WE can understand</li>\r\n</ul>\r\n", "step_number": 5, "image": "YoungCoders_1_5_body.jpg", "screencast": "", "step_name": "Introducing Idle", "lesson": 16, "audiocast": ""}, "model": "lessons.step", "pk": 100}, {"fields": {"header_title": "Modules", "description": "<p>Open a web page and read it:</p>\r\n\r\n<div class=\"codewrap\"><ul class=\"prompt\">\r\n    <li>import urllib</li>\r\n    <li>myurl = urllib.urlopen('http://www.python.org')</li>\r\n    <li>myfile = myurl.read()</li>\r\n    <li>print(myfile)</li>\r\n</ul></div>\r\n", "step_number": 4, "image": "", "screencast": "", "step_name": "Opening Web Pages", "lesson": 13, "audiocast": ""}, "model": "lessons.step", "pk": 101}, {"fields": {"header_title": "", "description": "<p>Python is a programming language used for building web sites, scripting, other applications such as games and music/video editors, and lots more.</p>\r\n<p>If you've never done any programming before, Python is a great language to begin with! Python was designed with readability in mind, making it the perfect starting point for learning about basic coding concepts.</p>\r\n<p>In the lessons ahead, you'll go from simple math to writing your first game using Python. Using a program called an interpreter, you'll be able to start writing code right away and see fast results.</p>\r\n\r\n", "step_number": 1, "image": "", "screencast": "", "step_name": "What Is Python?", "lesson": 1, "audiocast": ""}, "model": "lessons.step", "pk": 102}, {"fields": {"header_title": "", "description": "<p>Now it's time to start writing some of our own instructions for computers.</p>\r\n\r\n<p>There are many languages that we use to talk to computers, but the one we're here to learn about is Python.</p>\r\n\r\n<p>So go ahead and continue to the <a href=\"/learn/lesson/3/step/1/\">next lesson</a>, and we'll get started writing some Python.</p>\r\n", "step_number": 7, "image": "", "screencast": "", "step_name": "Let's Talk To Python", "lesson": 1, "audiocast": ""}, "model": "lessons.step", "pk": 103}, {"fields": {"header_title": "", "description": "<p>And we can do some of the same things with variables that have string values.</p>\r\n\r\n<p>Let's create two more variables:</p>\r\n\r\n<p>\r\n&raquo; color = \"yellow\"<br>\r\n&raquo; day = \"Monday\"<br>\r\n</p>\r\n\r\n<p>The first thing we'll do is put them together with a plus sign. Do you remember what the plus sign does for strings? It concatenates them.</p>\r\n\r\n<p>\r\n&raquo; color + day<br>\r\n</p>\r\n\r\n<p>And what happens if we multiply a variable with a string value by a variable with a number value?</p>\r\n\r\n<p>\r\n&raquo; color * fishes<br>\r\n</p>\r\n\r\n<p>Now let's look at this expression where we add and multiply. What do you think Python will return here? Let's type this at our prompt and find out:</p>\r\n\r\n<p>\r\n&raquo; color + day * fishes<br>\r\n</p>\r\n\r\n<p>Did you get the answer you expected? Okay, let's break this down and see what happened.</p>\r\n\r\n<p>Our expression is color plus day times fishes. We know that color is yellow, day is Monday, and fishes is three.</p>\r\n\r\n<p>So when we asked Python to calculate - or <i>evaluate</i> - this expression, what did it return? Let's take a look:</p>\r\n\r\n<p>\r\n&raquo; color + day * fishes<br>\r\n'yellowMondayMondayMonday'<br>\r\n</p>\r\n\r\n<p>You might have been expecting Python to concatenate color and day first, and then multiply those strings times three.</p>\r\n\r\n<p>Do you remember when we talked about <i>order of operations</i> earlier? Maybe not? Okay, let's recap.</p>\r\n\r\n<p><i>Order of operations</i> is a rule that determines which parts of an expression are calculated first. In most programming languages, multiplication is always done before adding or subtracting. So in this case, Python did the multiplication side of the operation first - so you got the word 'Monday' times 3 - and then concatenated that with the word 'yellow'.</p>\r\n\r\n<p>But if you wanted the addition to be done first, there is a different way you could write this expression. You could put parentheses around \"color + day\".</p>\r\n\r\n<p>\r\n&raquo; (color + day) * fishes<br>\r\n</p>\r\n\r\n<p>This way, Python knows that it needs to concatenate \"yellow\" and \"Monday\" first, and then multiply the whole thing by three:</p>\r\n\r\n<p>\r\n&raquo; (color + day) * fishes<br>\r\n'yellowMondayyellowMondayyellowMonday'<br>\r\n</p>\r\n", "step_number": 5, "image": "", "screencast": "", "step_name": "String Operations", "lesson": 4, "audiocast": ""}, "model": "lessons.step", "pk": 104}]